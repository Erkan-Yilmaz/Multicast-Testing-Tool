/*
 * PreferencesDialog.java
 *
 * Created on 20.04.2011, 15:39:26
 */

package com.spam.mctool.view.dialogs;

import com.spam.mctool.view.main.MainFrame;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.JFrame;



/**
 * Dialog for setting the application's settings. At the moment this only
 * includes the language.
 * @author Tobias St√∂ckel
 */
public class PreferencesDialog extends javax.swing.JDialog {
    
    /**
     * Store the user's selection whether to apply or discard the changes made in
     * the dialog.
     */
    private Selection selection;

    /**
     * Store the dialog's parent
     */
    private MainFrame parent;
    
    /**
     * Store whether the language was changed by the user
     */
    private boolean languageChanged = false;



    /**
     * wraps a Locale to be an item for the combo box
     */
    private static class LocaleItem {
        private final Locale locale;

        public LocaleItem(Locale l) {
            this.locale = l;
        }

        @Override
        public String toString() {
            return locale.getDisplayLanguage();
        }

        public Locale getLocale() {
            return locale;
        }
    }



    /**
     * Chained constructor to create a new preferences dialog
     */
    private PreferencesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadData();
    }



    /**
     * Create and initialize the preferences dialog.
     * @param parent the dialog's parent
     * @param modal whether to make the dialog modal
     */
    public PreferencesDialog(MainFrame parent, boolean modal) {
        this((JFrame)parent, modal);
        this.parent = parent;
    }



    /**
     * Overrides JDialog's <code>setVisible</code> method in order to center the
     * dialog relative to its parent (usually the main frame).
     * @param visible true: show and center the dialog. false: hide the dialog
     */
    @Override
    public void setVisible(boolean visible) {
        com.spam.mctool.view.main.MainFrame parent = (com.spam.mctool.view.main.MainFrame)getParent();
        java.awt.Dimension dim = parent.getSize();
        java.awt.Point     loc = parent.getLocationOnScreen();

        java.awt.Dimension size = getSize();

        loc.x += (dim.width  - size.width)/2;
        loc.y += (dim.height - size.height)/2;

        if (loc.x < 0) loc.x = 0;
        if (loc.y < 0) loc.y = 0;

        java.awt.Dimension screen = getToolkit().getScreenSize();

        if (size.width  > screen.width)
          size.width  = screen.width;
        if (size.height > screen.height)
          size.height = screen.height;

        if (loc.x + size.width > screen.width)
          loc.x = screen.width - size.width;

        if (loc.y + size.height > screen.height)
          loc.y = screen.height - size.height;

        setBounds(loc.x, loc.y, size.width, size.height);
        super.setVisible(visible);
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        laLanguage = new javax.swing.JLabel();
        cbLanguage = new javax.swing.JComboBox();
        buCancel = new javax.swing.JButton();
        buOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        setTitle(bundle.getString("PreferencesDialog.title")); // NOI18N
        setName("Form"); // NOI18N

        laLanguage.setText(bundle.getString("PreferencesDialog.laLanguage.text")); // NOI18N
        laLanguage.setName("laLanguage"); // NOI18N

        cbLanguage.setName("cbLanguage"); // NOI18N
        cbLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLanguageActionPerformed(evt);
            }
        });

        buCancel.setText(bundle.getString("PreferencesDialog.buCancel.text")); // NOI18N
        buCancel.setName("buCancel"); // NOI18N
        buCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buCancelActionPerformed(evt);
            }
        });

        buOk.setText(bundle.getString("PreferencesDialog.buOk.text")); // NOI18N
        buOk.setName("buOk"); // NOI18N
        buOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(buOk, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buCancel)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laLanguage)
                .addGap(36, 36, 36)
                .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laLanguage)
                    .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buCancel)
                    .addComponent(buOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    /**
     * Mark the dialog as approved and close it
     */
    private void buOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buOkActionPerformed
        selection = Selection.APPROVE_SELECTION;
        dispose();
    }//GEN-LAST:event_buOkActionPerformed



    /**
     * Mark the dialog as disapproved and close it.
     */
    private void buCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buCancelActionPerformed
        selection = Selection.DISCARD_SELECTION;
        dispose();
    }//GEN-LAST:event_buCancelActionPerformed



    /**
     * Remember that the user performed an action on the combo box, so the
     * language may have changed.
     */
    private void cbLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLanguageActionPerformed
        languageChanged = true;
    }//GEN-LAST:event_cbLanguageActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buCancel;
    private javax.swing.JButton buOk;
    private javax.swing.JComboBox cbLanguage;
    private javax.swing.JLabel laLanguage;
    // End of variables declaration//GEN-END:variables



    /**
     * Load the dialog's initial data. At the moment this means determining
     * for which locales there exist translations and list those in the combobox.
     */
    private void loadData() {
        for(Locale l : Locale.getAvailableLocales()) {
            ResourceBundle bundle = ResourceBundle.getBundle("internationalization/Bundle", l);
            if(bundle.getLocale().equals(l)) {
                LocaleItem li = new LocaleItem(l);
                cbLanguage.addItem(li);
                if(Locale.getDefault().equals(l)) {
                    cbLanguage.setSelectedItem(li);
                }
            }
        }
    }



    /**
     * Returns the locale selected in the combo box
     */
    public Locale getSelectedLocale() {
        return ((LocaleItem)cbLanguage.getSelectedItem()).getLocale();
    }



    /**
     * Returns the user's selection whether to apply or discard the changes made in
     * the dialog.
     */
    public Selection getSelection() {
        return selection;
    }



    /**
     * Returns whether the language might have changed during user interaction
     * @return
     */
    public boolean isLanguageChanged() {
        return languageChanged;
    }

}
