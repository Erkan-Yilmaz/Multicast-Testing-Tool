/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditSenderDialog.java
 *
 * Created on Mar 3, 2011, 7:47:26 PM
 */

package com.spam.mctool.view.dialogs;

import com.spam.mctool.model.MulticastStream.AnalyzingBehaviour;
import com.spam.mctool.model.Sender;
import com.spam.mctool.view.main.MainFrame;
import java.net.InetAddress;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 * Dialog window for adding and editing senders
 *
 * @author Tobias Schoknecht (tobias.schoknecht@gmail.com)
 */
public class EditSenderDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    private Sender sender = null;
    private Map<String,String> interfaceMap = new HashMap<String, String>();
    private Map<String,String> packageMap = new HashMap<String, String>();
    private Map<String,String> analyzingBehaviourMap = new HashMap<String, String>();
    private MainFrame parent;

    /**
     * Main Constructor
     * Initializes components, loads networkinterface data and initializes ComboBox values
     *
     * @param parent Reference to the parent window
     * @param modal
     */
    private EditSenderDialog(JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadNetInterfaces();
        initComboBoxes();
    }

    /**
     * Chained constructor to assign parent reference and to typecast parent to jframe
     * Sets default values and dialog title
     *
     * @param parent Reference to the parent MainFrame
     * @param modal
     */
    public EditSenderDialog(MainFrame parent, boolean modal) {
        this((JFrame)parent, modal);
        this.parent = parent;
        setDefaultValues();
        this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditSenderDialog.createTitle"));
    }

    /**
     * Constructor to be called with reference to an existing Sender in order to use the corresponding data as default values
     *
     * @param parent Reference to the parent MainFrame
     * @param modal
     * @param sender Reference to the Sender which sets the default values for this case
     * @param create Differentiation whether a new ReceiverGroup is to be created or an existing to be edited
     */
    public EditSenderDialog(MainFrame parent, boolean modal, Sender sender, boolean create) {
        this(parent, modal);
        this.sender = sender;
        loadData(create);

        this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditSenderDialog.editTitle"));

        if(create){
            this.sender = null;
            this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditSenderDialog.createTitle"));
        }
    }

    @Override
    public void setVisible(boolean visible) {
        com.spam.mctool.view.main.MainFrame parent = (com.spam.mctool.view.main.MainFrame)getParent();
        java.awt.Dimension dim = parent.getSize();
        java.awt.Point     loc = parent.getLocationOnScreen();

        java.awt.Dimension size = getSize();

        loc.x += (dim.width  - size.width)/2;
        loc.y += (dim.height - size.height)/2;

        if (loc.x < 0) loc.x = 0;
        if (loc.y < 0) loc.y = 0;

        java.awt.Dimension screen = getToolkit().getScreenSize();

        if (size.width  > screen.width)
          size.width  = screen.width;
        if (size.height > screen.height)
          size.height = screen.height;

        if (loc.x + size.width > screen.width)
          loc.x = screen.width - size.width;

        if (loc.y + size.height > screen.height)
          loc.y = screen.height - size.height;

        setBounds(loc.x, loc.y, size.width, size.height);
        super.setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        interfaceCombo = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        interfaceLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        groupLabel = new javax.swing.JLabel();
        activateBox = new javax.swing.JCheckBox();
        dataLabel = new javax.swing.JLabel();
        dataField = new javax.swing.JTextField();
        packetRateLabel = new javax.swing.JLabel();
        packetSizeLabel = new javax.swing.JLabel();
        ttlLabel = new javax.swing.JLabel();
        packetStyleLabel = new javax.swing.JLabel();
        packetStyleCombo = new javax.swing.JComboBox();
        groupField = new javax.swing.JFormattedTextField();
        packetRateField = new javax.swing.JTextField();
        packetSizeField = new javax.swing.JTextField();
        ttlField = new javax.swing.JTextField();
        analyzingBehaviourLabel = new javax.swing.JLabel();
        analyzingBehaviourCombo = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        portField = new javax.swing.JSpinner();
        cancelButton = new javax.swing.JButton();

        jSpinner1.setName("jSpinner1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        setTitle(bundle.getString("EditSenderDialog.title")); // NOI18N
        setName("Form"); // NOI18N

        interfaceCombo.setName("interfaceCombo"); // NOI18N

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check.png"))); // NOI18N
        okButton.setText(bundle.getString("EditSenderDialog.okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        interfaceLabel.setText(bundle.getString("EditSenderDialog.interfaceLabel.text")); // NOI18N
        interfaceLabel.setName("interfaceLabel"); // NOI18N

        portLabel.setText(bundle.getString("EditSenderDialog.portLabel.text")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N

        groupLabel.setText(bundle.getString("EditSenderDialog.groupLabel.text")); // NOI18N
        groupLabel.setName("groupLabel"); // NOI18N

        activateBox.setText(bundle.getString("EditSenderDialog.activateBox.text")); // NOI18N
        activateBox.setName("activateBox"); // NOI18N

        dataLabel.setText(bundle.getString("EditSenderDialog.dataLabel.text")); // NOI18N
        dataLabel.setName("dataLabel"); // NOI18N

        dataField.setName("dataField"); // NOI18N

        packetRateLabel.setText(bundle.getString("EditSenderDialog.packetRateLabel.text")); // NOI18N
        packetRateLabel.setName("packetRateLabel"); // NOI18N

        packetSizeLabel.setText(bundle.getString("EditSenderDialog.packetSizeLabel.text")); // NOI18N
        packetSizeLabel.setName("packetSizeLabel"); // NOI18N

        ttlLabel.setText(bundle.getString("EditSenderDialog.ttlLabel.text")); // NOI18N
        ttlLabel.setName("ttlLabel"); // NOI18N

        packetStyleLabel.setText(bundle.getString("EditSenderDialog.packetStyleLabel.text")); // NOI18N
        packetStyleLabel.setName("packetStyleLabel"); // NOI18N

        packetStyleCombo.setName("packetStyleCombo"); // NOI18N

        groupField.setName("groupField"); // NOI18N

        packetRateField.setName("packetRateField"); // NOI18N

        packetSizeField.setName("packetSizeField"); // NOI18N

        ttlField.setName("ttlField"); // NOI18N

        analyzingBehaviourLabel.setText(bundle.getString("EditSenderDialog.analyzingBehaviourLabel.text")); // NOI18N
        analyzingBehaviourLabel.setName("analyzingBehaviourLabel"); // NOI18N

        analyzingBehaviourCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        analyzingBehaviourCombo.setName("analyzingBehaviourCombo"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jSeparator3.setName("jSeparator3"); // NOI18N

        portField.setName("portField"); // NOI18N

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        cancelButton.setText(bundle.getString("EditSenderDialog.cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(interfaceLabel)
                        .addContainerGap(569, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groupLabel)
                            .addComponent(groupField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portLabel)
                            .addComponent(portField, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(dataLabel)
                                    .addGap(240, 240, 240))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(packetRateField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                        .addComponent(dataField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                        .addComponent(ttlField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(packetRateLabel)
                                .addGap(150, 150, 150)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(packetSizeLabel)
                                .addContainerGap(218, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(packetStyleLabel)
                                .addContainerGap(262, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(packetSizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                                    .addComponent(packetStyleCombo, 0, 339, Short.MAX_VALUE))
                                .addGap(13, 13, 13))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ttlLabel)
                        .addContainerGap(541, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(analyzingBehaviourLabel)
                        .addContainerGap(497, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(analyzingBehaviourCombo, 0, 347, Short.MAX_VALUE)
                        .addGap(286, 286, 286))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(okButton)
                            .addComponent(activateBox, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addGap(225, 225, 225))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(interfaceCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 621, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupLabel)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(interfaceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interfaceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataLabel)
                    .addComponent(packetStyleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packetStyleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packetRateLabel)
                    .addComponent(packetSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packetRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packetSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ttlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ttlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzingBehaviourLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzingBehaviourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activateBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates a map for a new Sender and passes it to the parent to create a new Sender
     * or changes the values on edit-modus and closes the dialog afterwards
     *
     * @param evt Click-Event
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Map<String,String> senderMap = new HashMap<String, String>();

        if(this.sender == null){
            //if no sender reference exists
            // create map and pass it to parent
            senderMap.put("group", this.groupField.getText());
            senderMap.put("port", this.portField.getValue().toString());
            senderMap.put("pps", this.packetRateField.getText());
            senderMap.put("psize", this.packetSizeField.getText());
            senderMap.put("ttl", this.ttlField.getText());
            senderMap.put("payload", this.dataField.getText());
            senderMap.put("ptype", this.packageMap.get(this.packetStyleCombo.getSelectedItem().toString()));
            senderMap.put("ninf",this.interfaceMap.get(this.interfaceCombo.getSelectedItem().toString()));
            senderMap.put("abeh",this.analyzingBehaviourMap.get(this.analyzingBehaviourCombo.getSelectedItem().toString()));
            
            if(parent.addSender(senderMap, this.activateBox.isSelected())){
                this.dispose();
            }
        }
        else{
            //if sender reference exists, change the values
            try{
                if(this.sender.setSenderConfiguredPacketRate(this.packetRateField.getText()) &&
                   this.sender.setPacketSize(this.packetSizeField.getText()) &&
                   this.sender.setTtl(this.ttlField.getText())){

                    this.sender.setAnalyzingBehaviour(AnalyzingBehaviour.getByIdentifier(this.analyzingBehaviourMap.get(this.analyzingBehaviourCombo.getSelectedItem().toString())));
                    //deactivate sender and according to the settings reactivate it to change values on running stream
                    this.sender.deactivate();
                    if(this.activateBox.isSelected()){
                        this.sender.activate();
                    }

                    this.dispose();

                }
            }
            catch(NumberFormatException e){
                //In case of an invalid value for TTL, PacketRate and PacketSize, keep the editdialog running
            }

        }       
}                                        

    /**
     * Closes the dialog
     *
     * @param evt Click-Event
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Loads the data from the corresponding Sender
     *
     * @param create When false some fields are diabled for editing
     */
    private void loadData(boolean create){

        //loads all the data from the sender given in the constructor
        this.groupField.setText(this.sender.getGroup().getHostAddress());
        this.portField.setValue(this.sender.getPort());
        this.dataField.setText(this.sender.getPayloadAsString());
        this.packetRateField.setText(Integer.toString(this.sender.getSenderConfiguredPacketRate()));
        this.packetSizeField.setText(Integer.toString(this.sender.getPacketSize()));
        this.ttlField.setText(Integer.toString(this.sender.getTtl()));
        this.packetStyleCombo.setSelectedItem(this.sender.getpType().getDisplayName());

        //iterate over all networkinterface addresses to set the value from the sender
        for (InterfaceAddress interfaceAddress : this.sender.getNetworkInterface().getInterfaceAddresses()) {
            InetAddress address = interfaceAddress.getAddress();
            String ip = null;

            if(this.sender.getGroup() instanceof Inet4Address){
                if(address instanceof Inet4Address){
                    ip = address.getHostAddress();
                }
            }
            else if(this.sender.getGroup() instanceof Inet6Address){
                if(address instanceof Inet6Address){
                    ip = address.getHostAddress();
                }
            }

            this.interfaceCombo.setSelectedItem(this.sender.getNetworkInterface().getDisplayName() + " - " + ip);
        }

        //interate over analizing behaviour map to set the value from the sender
        Iterator it = analyzingBehaviourMap.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry entry = (Map.Entry)it.next();

            if(entry.getValue().equals(this.sender.getAnalyzingBehaviour().getIdentifier())){
                this.analyzingBehaviourCombo.setSelectedItem(entry.getKey());
            }
        }

        //set active-CheckBox
        if(this.sender.isActive()){
            this.activateBox.setSelected(true);
        }

        //disables certain fields when sender is in edit-mode
        if(!create){
            this.groupField.setEnabled(false);
            this.portField.setEnabled(false);
            this.dataField.setEnabled(false);
            this.interfaceCombo.setEnabled(false);
            this.packetStyleCombo.setEnabled(false);
        }
    }

    /**
     * Loads and initializes the list of NetworkInterfaces and the corresponding ComboBox
     */
    private void loadNetInterfaces(){
        //remove all current items from the ComboBox
        this.interfaceCombo.removeAllItems();
        //initialize enumeration
	Enumeration<NetworkInterface> interfaces = null;
        try {
            interfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException ex) {
            Logger.getLogger(EditSenderDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        //loop over all NetworkInterfaces
        while (interfaces.hasMoreElements()) {
            NetworkInterface networkInterface = interfaces.nextElement();

            //loop over all corresponding InterfaceAddresses (IPv4 & IPv6)
            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
                //get corresponding InetAddress
                InetAddress address = interfaceAddress.getAddress();

                //insert UI Name to the interfaceComboBox
                this.interfaceCombo.addItem(networkInterface.getDisplayName() + " - " + address.getHostAddress());
                //insert UI Name and address to the interfaceMap
                this.interfaceMap.put(networkInterface.getDisplayName() + " - " + address.getHostAddress(),address.getHostAddress());
            }
        }       
    }

    /**
     * Sets default values
     */
    private void setDefaultValues(){
        //default group
        this.groupField.setText("225.1.1.1");
        //default port
        this.portField.setValue(12345);
        //default text
        this.dataField.setText("Default");
        //default packetRate
        this.packetRateField.setText("10");
        //default packetSize
        this.packetSizeField.setText("200");
        //default timeToLive
        this.ttlField.setText("32");
        //default packetStyle
        this.packetStyleCombo.setSelectedItem("Spam Packet Format");
    }

    /**
     * Initializes ComboBox-Values
     */
    private void initComboBoxes(){
        //putting the mapping from internal packet format to the UI Name
        this.packageMap.put("Spam Packet Format","spam");
        this.packageMap.put("Hirschmann Packet Format","hmann");
        //remove all current items (values automatically inserted by netbeans)
        this.packetStyleCombo.removeAllItems();
        //Add new values to the packet list
        this.packetStyleCombo.addItem("Spam Packet Format");
        this.packetStyleCombo.addItem("Hirschmann Packet Format");

        //putting the mapping from internal analyzing-behaviour-name to the UI Name
        this.analyzingBehaviourMap.put("Default","default");
        this.analyzingBehaviourMap.put("Lazy","lazy");
        this.analyzingBehaviourMap.put("Eager","eager");
        //remove all current items (values automatically inserted by netbeans)
        this.analyzingBehaviourCombo.removeAllItems();
        //Add new values to the packet list
        this.analyzingBehaviourCombo.addItem("Default");
        this.analyzingBehaviourCombo.addItem("Lazy");
        this.analyzingBehaviourCombo.addItem("Eager");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activateBox;
    private javax.swing.JComboBox analyzingBehaviourCombo;
    private javax.swing.JLabel analyzingBehaviourLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField dataField;
    private javax.swing.JLabel dataLabel;
    private javax.swing.JFormattedTextField groupField;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JComboBox interfaceCombo;
    private javax.swing.JLabel interfaceLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField packetRateField;
    private javax.swing.JLabel packetRateLabel;
    private javax.swing.JTextField packetSizeField;
    private javax.swing.JLabel packetSizeLabel;
    private javax.swing.JComboBox packetStyleCombo;
    private javax.swing.JLabel packetStyleLabel;
    private javax.swing.JSpinner portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField ttlField;
    private javax.swing.JLabel ttlLabel;
    // End of variables declaration//GEN-END:variables

}
