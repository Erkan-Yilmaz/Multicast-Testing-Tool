/*
 * SaveProfileDialog.java
 *
 * Created on 12.04.2011, 17:04:34
 */

package com.spam.mctool.view.dialogs;

import java.io.File;

/**
 * A dialog window for saving a multicast streaming profile. This class displays
 * a dialog containing standard file choosing elements, as well as an additional
 * text field for specifying a profile name.
 * 
 * After disposal of the dialog, the client can query it for the type of action
 * the user committed (accept, or cancel), the file the user selected and the
 * profile name the user entered.
 *
 * Note that this dialog does not provide any sanity checks of the input data.
 *
 * @author Tobias St√∂ckel
 */
public class SaveProfileDialog extends javax.swing.JDialog {

    /**
     * Stores the type of action the user committed. One of
     * JFileChooser.APPROVE_SELECTION and JFileChooser.CANCEL_SELECTION.
     */
    private String selection;

    /**
     * Stores the profile name the user specified in the dialog.
     */
    private String profileName;

    /**
     * Stores the path the user specified in the dialog as a File object.
     */
    private File   selectedFile;

    /**
     * Creates a SaveProfileDialog with the specified parent frame and modality.
     * @param parent the owner of this dialog
     * @param modal the modality of this dialog
     */
    public SaveProfileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        txtProfileName = new javax.swing.JTextField();
        laProfileName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        laProfileName.setText(bundle.getString("SaveProfileDialog.laProfileName.text_1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(laProfileName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laProfileName)
                    .addComponent(txtProfileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method will be invoked if the user either confirms (by pressing
     * Enter or the OK-button) or cancels the file selection. It stores the
     * selected path, profile name and the way the user exited the selection, to
     * according fields and closes the dialog.
     * @param evt The event invoked by the JFileChooser component.
     */
    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        selection = evt.getActionCommand();
        profileName = txtProfileName.getText();
        selectedFile = jFileChooser.getSelectedFile();
        setVisible(false);
        dispose();

    }//GEN-LAST:event_jFileChooserActionPerformed

    /**
     * Main method for testing purposes.
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SaveProfileDialog dialog = new SaveProfileDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel laProfileName;
    private javax.swing.JTextField txtProfileName;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the way the user ended the dialog selection. This could either
     * an approval of the selected file and profile name or a cancellation of
     * the process. The returned constant will be one of
     * JFileChooser.APPROVE_SELECTION and JFileChooser.CANCEL_SELECTION.
     *
     * @return The type of dialog submission by means of JFileChooser's constants.
     */
    public String getSelection() {
        return selection;
    }

    /**
     * Returns the profile name specified by the user in the dialog.
     * @return The specified profile name.
     */
    public String getProfileName() {
        return profileName;
    }

    /**
     * Returns the file path as selected by the user. The file path is wrapped
     * in a File object.
     * @return The selected file path wrapped in a File object.
     */
    public File getSelectedFile() {
        return selectedFile;
    }

}
