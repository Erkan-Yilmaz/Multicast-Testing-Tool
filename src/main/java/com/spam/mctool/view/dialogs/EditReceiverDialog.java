/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditReceiverDialog.java
 *
 * Created on Mar 3, 2011, 7:47:08 PM
 */

package com.spam.mctool.view.dialogs;

import com.spam.mctool.model.ReceiverGroup;
import com.spam.mctool.view.main.MainFrame;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 * Dialog window for adding and editing receiver groups
 *
 * @author Tobias Schoknecht (tobias.schoknecht@gmail.com)
 */
public class EditReceiverDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    private ReceiverGroup receiverGroup = null;
    private Map<String,String> interfaceMap = new HashMap<String, String>();
    private Map<String,String> analyzingBehaviourMap = new HashMap<String, String>();
    private MainFrame parent;

    /**
     * Main Constructor
     * Initializes components, loads networkinterface data and initializes ComboBox values
     *
     * @param parent Reference to the parent window
     * @param modal
     */
    private EditReceiverDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadNetInterfaces();
        initComboBoxes();
    }

    /**
     * Chained constructor to assign parent reference and to typecast parent to jframe
     * Sets default values and dialog title
     *
     * @param parent Reference to the parent MainFrame
     * @param modal
     */
    public EditReceiverDialog(MainFrame parent, boolean modal) {
        this((JFrame)parent, modal);
        this.parent = parent;
        setDefaultValues();
        this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditReceiverDialog.createTitle"));
    }

    /**
     * Constructor to be called with reference to an existing ReceiverGroup in order to use the corresponding data as default values
     *
     * @param parent Reference to the parent MainFrame
     * @param modal
     * @param receiverGroup Reference to the ReceiverGroup which sets the default values for this case
     * @param create Differentiation whether a new ReceiverGroup is to be created or an existing to be edited
     */
    public EditReceiverDialog(MainFrame parent, boolean modal, ReceiverGroup receiverGroup, boolean create) {
        this(parent, modal);
        this.receiverGroup = receiverGroup;
        loadData(create);

        this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditReceiverDialog.editTitle"));

        if(create){
            this.receiverGroup = null;
            this.setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("EditReceiverDialog.createTitle"));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupField = new javax.swing.JTextField();
        groupLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        interfaceLabel = new javax.swing.JLabel();
        interfaceCombo = new javax.swing.JComboBox();
        activateBox = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        portField = new javax.swing.JSpinner();
        analyzingBehaviourLabel = new javax.swing.JLabel();
        analyzingBehaviourCombo = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        groupField.setName("groupField"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        groupLabel.setText(bundle.getString("EditReceiverDialog.groupLabel.text")); // NOI18N
        groupLabel.setName("groupLabel"); // NOI18N

        portLabel.setText(bundle.getString("EditReceiverDialog.portLabel.text")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N

        interfaceLabel.setText(bundle.getString("EditReceiverDialog.interfaceLabel.text")); // NOI18N
        interfaceLabel.setName("interfaceLabel"); // NOI18N

        interfaceCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        interfaceCombo.setName("interfaceCombo"); // NOI18N

        activateBox.setText(bundle.getString("EditReceiverDialog.activateBox.text")); // NOI18N
        activateBox.setActionCommand(bundle.getString("EditReceiverDialog.activateBox.actionCommand")); // NOI18N
        activateBox.setName("activateBox"); // NOI18N

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check.png"))); // NOI18N
        okButton.setText(bundle.getString("EditReceiverDialog.okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        cancelButton.setText(bundle.getString("EditReceiverDialog.cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        portField.setName("portField"); // NOI18N

        analyzingBehaviourLabel.setText(bundle.getString("EditReceiverDialog.analyzingBehaviourLabel.text")); // NOI18N
        analyzingBehaviourLabel.setName("analyzingBehaviourLabel"); // NOI18N

        analyzingBehaviourCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        analyzingBehaviourCombo.setName("analyzingBehaviourCombo"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(groupField, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(groupLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portLabel)
                                    .addComponent(portField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                            .addComponent(interfaceLabel)
                            .addComponent(analyzingBehaviourLabel)
                            .addComponent(analyzingBehaviourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                            .addComponent(activateBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                            .addComponent(interfaceCombo, 0, 520, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addGap(229, 229, 229))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupLabel)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(interfaceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interfaceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzingBehaviourLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzingBehaviourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activateBox)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates a map for a new ReceiverGroup and passes it to the parent to create a new ReceiverGroup
     * or changes the Activated-status and closes the dialog afterwards
     *
     * @param evt ClickEvent
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Map<String,String> receiverMap = new HashMap<String, String>();

        if(this.receiverGroup == null){
            //if no ReceiverGroup is set, create a map with the specified values and pass it to the parent for creation
            receiverMap.put("group", this.groupField.getText());
            receiverMap.put("port", this.portField.getValue().toString());
            receiverMap.put("ninf",this.interfaceMap.get(this.interfaceCombo.getSelectedItem().toString()));
            receiverMap.put("abeh",this.analyzingBehaviourMap.get(this.analyzingBehaviourCombo.getSelectedItem().toString()));
            
            if(parent.addReceiverGroup(receiverMap, this.activateBox.isSelected())){
                this.dispose();
            }
        }
        else{
            //activate/deactivate
            this.receiverGroup.deactivate();
            if(this.activateBox.isSelected()){
                this.receiverGroup.activate();
            }
            this.dispose();
        }     
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Closes the dialog
     *
     * @param evt Click-Event
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Loads the data from the corresponding ReceiverGroup
     *
     * @param create When false some fields are diabled for editing
     */
    private void loadData(boolean create){
        //get data from receiverGroup
        this.groupField.setText(this.receiverGroup.getGroup().getHostAddress());
        this.portField.setValue(this.receiverGroup.getPort());

        //set corresponding display name to configured interface from receivergroup
        for (InterfaceAddress interfaceAddress : this.receiverGroup.getNetworkInterface().getInterfaceAddresses()) {
            InetAddress address = interfaceAddress.getAddress();
            String ip = null;

            if(this.receiverGroup.getGroup() instanceof Inet4Address){
                if(address instanceof Inet4Address){
                    ip = address.getHostAddress();
                }
            }
            else if(this.receiverGroup.getGroup() instanceof Inet6Address){
                if(address instanceof Inet6Address){
                    ip = address.getHostAddress();
                }
            }

            this.interfaceCombo.setSelectedItem(this.receiverGroup.getNetworkInterface().getDisplayName() + " - " + ip);
        }

        //set corresponding analyzing behaviour in UI
        Iterator it = analyzingBehaviourMap.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry entry = (Map.Entry)it.next();

            if(entry.getValue().equals(this.receiverGroup.getAnalyzingBehaviour().getIdentifier())){
                this.analyzingBehaviourCombo.setSelectedItem(entry.getKey());
            }
        }

        //set active-CheckBox value
        if(this.receiverGroup.isActive()){
            this.activateBox.setSelected(true);
        }

        //if in edit-mode disable certain UI components
        if(!create){
            this.groupField.setEnabled(false);
            this.portField.setEnabled(false);
            this.interfaceCombo.setEnabled(false);
        }
    }

    /**
     * Loads and initializes the list of NetworkInterfaces and the corresponding ComboBox
     */
    private void loadNetInterfaces(){
        //remove all current items from ComboBox
        this.interfaceCombo.removeAllItems();
	Enumeration<NetworkInterface> interfaces = null;
        try {
            interfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException ex) {
            Logger.getLogger(EditSenderDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        //loop over all interfaces
        while (interfaces.hasMoreElements()) {
            NetworkInterface networkInterface = interfaces.nextElement();

            //loop over all addresses (IPv4 & IPv6) corresponding to the current NetworkInterface
            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
                InetAddress address = interfaceAddress.getAddress();

                //insert display names to ComboBox
                this.interfaceCombo.addItem(networkInterface.getDisplayName() + " - " + address.getHostAddress());
                //insert internal and UI name to interfaceMap
                this.interfaceMap.put(networkInterface.getDisplayName() + " - " + address.getHostAddress(), address.getHostAddress());
            }
        }
    }

    /**
     * Sets default values
     */
    private void setDefaultValues(){
        //set default group
        this.groupField.setText("225.1.1.1");
        //set default port
        this.portField.setValue(12345);
    }

    /**
     * Initializes ComboBox-Values
     */
    private void initComboBoxes(){
        //set analyzing map with values shown in the UI and internal names
        this.analyzingBehaviourMap.put("Default","default");
        this.analyzingBehaviourMap.put("Lazy","lazy");
        this.analyzingBehaviourMap.put("Eager","eager");
        //remove all items set by default (e.g. due to netbeans)
        this.analyzingBehaviourCombo.removeAllItems();
        //set new values to ComboBox
        this.analyzingBehaviourCombo.addItem("Default");
        this.analyzingBehaviourCombo.addItem("Lazy");
        this.analyzingBehaviourCombo.addItem("Eager");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activateBox;
    private javax.swing.JComboBox analyzingBehaviourCombo;
    private javax.swing.JLabel analyzingBehaviourLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField groupField;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JComboBox interfaceCombo;
    private javax.swing.JLabel interfaceLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton okButton;
    private javax.swing.JSpinner portField;
    private javax.swing.JLabel portLabel;
    // End of variables declaration//GEN-END:variables

}
