/*
 * SenderStateRenderer.java
 *
 * Created on 07.03.2011, 22:24:24
 */

package com.spam.mctool.view.main.sendertable;

import com.spam.mctool.model.MulticastStream;
import com.spam.mctool.model.Receiver;
import com.spam.mctool.model.Sender;
import java.awt.Color;
import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 * Renderer that displays icons representing the sender's state.
 * @author Tobias
 */
public class SenderStateRenderer extends javax.swing.JPanel implements TableCellRenderer {

    
    
    /**
     * Create and initialize the state renderer
     */
    public SenderStateRenderer() {
        initComponents();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        laActiveIcon = new javax.swing.JLabel();
        laErrorIcon = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        laActiveIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_green.png"))); // NOI18N
        add(laActiveIcon);
        add(laErrorIcon);
    }// </editor-fold>//GEN-END:initComponents



    /**
     * Configure the renderer for the selected cell and return it.
     */
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected) {
            this.setBackground(table.getSelectionBackground());
        } else {
            if (row % 2 == 0) {
                this.setBackground(table.getBackground());
            } else {
                this.setBackground(table.getGridColor());
            }
        }
        if(value instanceof Sender) {
            Sender s = (Sender)value;
            if(s.isActive()) {
                laActiveIcon.setIcon(activated);
                if(s.isOverloaded()) {
                    laErrorIcon.setIcon(negative);
                }
            } else {
                laActiveIcon.setIcon(deactivated);
                laErrorIcon.setIcon(null);
            }
        } else {
            laActiveIcon.setIcon(error);
            laErrorIcon.setIcon(null);
        }
        return this;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel laActiveIcon;
    private javax.swing.JLabel laErrorIcon;
    // End of variables declaration//GEN-END:variables
    private ImageIcon activated   = new ImageIcon(getClass().getResource("/images/play_green.png"));
    private ImageIcon deactivated = new ImageIcon(getClass().getResource("/images/stop_red.png"));
    private ImageIcon error       = new ImageIcon(getClass().getResource("/images/error.png"));
    private ImageIcon negative    = new ImageIcon(getClass().getResource("/images/negative.png"));



    /**
     * Graphical representation of this renderers configuration
     */
    @Override
    public String toString() {
        String s = laActiveIcon.getIcon() == activated ? "> " : "II ";
        s = s + (laErrorIcon.getIcon() == error ? "X " : "");
        s = s + (laErrorIcon.getIcon() == negative ? ":( " : "");
        return s;
    }
}
