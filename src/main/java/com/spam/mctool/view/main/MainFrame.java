/*
 * MainFrame.java
 *
 * Created on Mar 3, 2011, 4:57:17 PM
 */

package com.spam.mctool.view.main;

import com.spam.mctool.controller.Profile;
import com.spam.mctool.intermediates.OverallReceiverStatisticsUpdatedEvent;
import com.spam.mctool.intermediates.OverallSenderStatisticsUpdatedEvent;
import com.spam.mctool.intermediates.ProfileChangeEvent;
import com.spam.mctool.intermediates.ReceiverAddedOrRemovedEvent;
import com.spam.mctool.intermediates.ReceiverDataChangedEvent;
import com.spam.mctool.intermediates.SenderAddedOrRemovedEvent;
import com.spam.mctool.intermediates.SenderDataChangedEvent;
import com.spam.mctool.model.MulticastStream;
import com.spam.mctool.model.Receiver;
import com.spam.mctool.model.ReceiverGroup;
import com.spam.mctool.model.ReceiverManager;
import com.spam.mctool.model.ReceiverPool;
import com.spam.mctool.model.Sender;
import com.spam.mctool.model.SenderManager;
import com.spam.mctool.view.GraphicalView;
import com.spam.mctool.view.dialogs.AboutDialog;
import com.spam.mctool.view.dialogs.EditReceiverDialog;
import com.spam.mctool.view.dialogs.EditSenderDialog;
import com.spam.mctool.view.dialogs.PreferencesDialog;
import com.spam.mctool.view.dialogs.SaveProfileDialog;
import com.spam.mctool.view.dialogs.ShowReceiverDialog;
import com.spam.mctool.view.dialogs.ShowSenderDialog;
import com.spam.mctool.view.main.receivertable.ReceiverTableModel;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Tobias St√∂ckel (Tobias.Stoeckel@de.ibm.com)
 */
public class MainFrame extends javax.swing.JFrame implements javax.swing.event.ListSelectionListener {

    private static final long serialVersionUID = 1L;
    private GraphicalView view;

    /** Creates new form MainFrame */
    public MainFrame() {
        this(null);
    }

    public MainFrame(GraphicalView view) {
        this.view = view;
        initComponents();
        initCustomComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusRenderer1 = new com.spam.mctool.view.main.sendertable.SenderStateRenderer();
        twoColorRenderer1 = new com.spam.mctool.view.main.TwoColorRenderer();
        mainSplitPane = new javax.swing.JSplitPane();
        senderSplitPane = new javax.swing.JSplitPane();
        paSendingStatistics = new javax.swing.JPanel();
        laSendingStatistics = new javax.swing.JLabel();
        laSentCaption = new javax.swing.JLabel();
        laSenderRateCaption = new javax.swing.JLabel();
        sendingStatisticsSeparator = new javax.swing.JSeparator();
        laSent = new javax.swing.JLabel();
        laSenderRate = new javax.swing.JLabel();
        paSenderTableOuter = new javax.swing.JPanel();
        paSenderButtons = new javax.swing.JPanel();
        buActivateSender = new javax.swing.JButton();
        buDeactivateSender = new javax.swing.JButton();
        buAddSender = new javax.swing.JButton();
        buShowSender = new javax.swing.JButton();
        buEditSender = new javax.swing.JButton();
        buDeleteSender = new javax.swing.JButton();
        paSenderTableInner = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        senderTable = new com.spam.mctool.view.main.sendertable.JSenderTable();
        paSenderTableCaption = new javax.swing.JPanel();
        laSenderTableCaption = new javax.swing.JLabel();
        senderTableIcon = new javax.swing.JLabel();
        receiverSplitPane = new javax.swing.JSplitPane();
        paReceivingStatistics = new javax.swing.JPanel();
        laReceivingStatisticsCaption = new javax.swing.JLabel();
        laReceivedCaption = new javax.swing.JLabel();
        laReceivingRateCaption = new javax.swing.JLabel();
        laLostPacketsCaption = new javax.swing.JLabel();
        laFaultyPacketsCaption = new javax.swing.JLabel();
        receivingStatisticsSeparator = new javax.swing.JSeparator();
        laReceived = new javax.swing.JLabel();
        laReceivingRate = new javax.swing.JLabel();
        laLostPackets = new javax.swing.JLabel();
        laFaultyPackets = new javax.swing.JLabel();
        paReceiverTableOuter = new javax.swing.JPanel();
        paReceiverButtons = new javax.swing.JPanel();
        buActivateReceiver = new javax.swing.JButton();
        buDeactivateReceiver = new javax.swing.JButton();
        buAddReceiver = new javax.swing.JButton();
        buShowReceiver = new javax.swing.JButton();
        buEditReceiver = new javax.swing.JButton();
        buDeleteReceiver = new javax.swing.JButton();
        paReceiverTableInner = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiverTable = new com.spam.mctool.view.main.receivertable.JReceiverTable();
        paReceiverTableCaption = new javax.swing.JPanel();
        laReceiverTableCaption = new javax.swing.JLabel();
        laReceiverTableIcon = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miOpenProfile = new javax.swing.JMenuItem();
        miSaveProfile = new javax.swing.JMenuItem();
        miSaveProfileAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miPreferences = new javax.swing.JMenuItem();
        sepBeforeRecentProfiles = new javax.swing.JPopupMenu.Separator();
        sepAfterRecentProfiles = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();
        miHelp = new javax.swing.JMenuItem();

        statusRenderer1.setName("statusRenderer1"); // NOI18N

        twoColorRenderer1.setName("twoColorRenderer1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("MainFrame.title") + ((view.getCurrentProfile() != null && view.getCurrentProfile().getName() != null) ? " - " + view.getCurrentProfile().getName() : ""));
        setName("Form"); // NOI18N

        mainSplitPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainSplitPane.setDividerLocation(267);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplitPane.setResizeWeight(0.5);
        mainSplitPane.setContinuousLayout(true);
        mainSplitPane.setName("mainSplitPane"); // NOI18N
        mainSplitPane.setOneTouchExpandable(true);

        senderSplitPane.setBorder(null);
        senderSplitPane.setDividerLocation(590);
        senderSplitPane.setResizeWeight(1.0);
        senderSplitPane.setContinuousLayout(true);
        senderSplitPane.setName("senderSplitPane"); // NOI18N
        senderSplitPane.setOneTouchExpandable(true);

        paSendingStatistics.setName("paSendingStatistics"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        laSendingStatistics.setText(bundle.getString("MainFrame.laSendingStatistics.text")); // NOI18N
        laSendingStatistics.setName("laSendingStatistics"); // NOI18N

        laSentCaption.setText(bundle.getString("MainFrame.laSentCaption.text")); // NOI18N
        laSentCaption.setName("laSentCaption"); // NOI18N

        laSenderRateCaption.setText(bundle.getString("MainFrame.laSenderRateCaption.text")); // NOI18N
        laSenderRateCaption.setName("laSenderRateCaption"); // NOI18N

        sendingStatisticsSeparator.setName("sendingStatisticsSeparator"); // NOI18N

        laSent.setText(bundle.getString("MainFrame.laSent.text")); // NOI18N
        laSent.setName("laSent"); // NOI18N

        laSenderRate.setText(bundle.getString("MainFrame.laSenderRate.text")); // NOI18N
        laSenderRate.setName("laSenderRate"); // NOI18N

        javax.swing.GroupLayout paSendingStatisticsLayout = new javax.swing.GroupLayout(paSendingStatistics);
        paSendingStatistics.setLayout(paSendingStatisticsLayout);
        paSendingStatisticsLayout.setHorizontalGroup(
            paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendingStatisticsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(laSendingStatistics)
                    .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                        .addComponent(laSentCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(laSent))
                    .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                        .addComponent(laSenderRateCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(laSenderRate)))
                .addContainerGap())
        );
        paSendingStatisticsLayout.setVerticalGroup(
            paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laSendingStatistics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendingStatisticsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laSentCaption)
                    .addComponent(laSent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laSenderRateCaption)
                    .addComponent(laSenderRate))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        senderSplitPane.setRightComponent(paSendingStatistics);

        paSenderTableOuter.setName("paSenderTableOuter"); // NOI18N
        paSenderTableOuter.setLayout(new java.awt.BorderLayout());

        paSenderButtons.setName("paSenderButtons"); // NOI18N
        paSenderButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buActivateSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_green.png"))); // NOI18N
        buActivateSender.setText(bundle.getString("MainFrame.buActivateSender.text")); // NOI18N
        buActivateSender.setEnabled(false);
        buActivateSender.setName("buActivateSender"); // NOI18N
        buActivateSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buActivateSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buActivateSender);

        buDeactivateSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_red.png"))); // NOI18N
        buDeactivateSender.setText(bundle.getString("MainFrame.buDeactivateSender.text")); // NOI18N
        buDeactivateSender.setEnabled(false);
        buDeactivateSender.setName("buDeactivateSender"); // NOI18N
        buDeactivateSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeactivateSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buDeactivateSender);

        buAddSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_green.png"))); // NOI18N
        buAddSender.setText(bundle.getString("MainFrame.buAddSender.text")); // NOI18N
        buAddSender.setName("buAddSender"); // NOI18N
        buAddSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buAddSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buAddSender);

        buShowSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preview.png"))); // NOI18N
        buShowSender.setText(bundle.getString("MainFrame.buShowSender.text")); // NOI18N
        buShowSender.setEnabled(false);
        buShowSender.setName("buShowSender"); // NOI18N
        buShowSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buShowSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buShowSender);

        buEditSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        buEditSender.setText(bundle.getString("MainFrame.buEditSender.text")); // NOI18N
        buEditSender.setEnabled(false);
        buEditSender.setName("buEditSender"); // NOI18N
        buEditSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buEditSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buEditSender);

        buDeleteSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        buDeleteSender.setText(bundle.getString("MainFrame.buDeleteSender.text")); // NOI18N
        buDeleteSender.setEnabled(false);
        buDeleteSender.setName("buDeleteSender"); // NOI18N
        buDeleteSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeleteSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buDeleteSender);

        paSenderTableOuter.add(paSenderButtons, java.awt.BorderLayout.SOUTH);

        paSenderTableInner.setName("paSenderTableInner"); // NOI18N
        paSenderTableInner.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        senderTable.setName("senderTable"); // NOI18N
        senderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                senderTableMouseClicked(evt);
            }
        });
        senderTable.getSelectionModel().addListSelectionListener(this);
        jScrollPane2.setViewportView(senderTable);

        paSenderTableInner.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        paSenderTableOuter.add(paSenderTableInner, java.awt.BorderLayout.CENTER);

        paSenderTableCaption.setName("paSenderTableCaption"); // NOI18N
        paSenderTableCaption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        laSenderTableCaption.setText(bundle.getString("MainFrame.laSenderTableCaption.text")); // NOI18N
        laSenderTableCaption.setName("laSenderTableCaption"); // NOI18N
        paSenderTableCaption.add(laSenderTableCaption);

        senderTableIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sender.png"))); // NOI18N
        senderTableIcon.setName("senderTableIcon"); // NOI18N
        paSenderTableCaption.add(senderTableIcon);

        paSenderTableOuter.add(paSenderTableCaption, java.awt.BorderLayout.NORTH);

        senderSplitPane.setLeftComponent(paSenderTableOuter);

        mainSplitPane.setTopComponent(senderSplitPane);

        receiverSplitPane.setBorder(null);
        receiverSplitPane.setDividerLocation(590);
        receiverSplitPane.setResizeWeight(1.0);
        receiverSplitPane.setContinuousLayout(true);
        receiverSplitPane.setName("receiverSplitPane"); // NOI18N
        receiverSplitPane.setOneTouchExpandable(true);

        paReceivingStatistics.setName("paReceivingStatistics"); // NOI18N

        laReceivingStatisticsCaption.setText(bundle.getString("MainFrame.laReceivingStatisticsCaption.text")); // NOI18N
        laReceivingStatisticsCaption.setName("laReceivingStatisticsCaption"); // NOI18N

        laReceivedCaption.setText(bundle.getString("MainFrame.laReceivedCaption.text")); // NOI18N
        laReceivedCaption.setName("laReceivedCaption"); // NOI18N

        laReceivingRateCaption.setText(bundle.getString("MainFrame.laReceivingRateCaption.text")); // NOI18N
        laReceivingRateCaption.setName("laReceivingRateCaption"); // NOI18N

        laLostPacketsCaption.setText(bundle.getString("MainFrame.laLostPacketsCaption.text")); // NOI18N
        laLostPacketsCaption.setName("laLostPacketsCaption"); // NOI18N

        laFaultyPacketsCaption.setText(bundle.getString("MainFrame.laFaultyPacketsCaption.text")); // NOI18N
        laFaultyPacketsCaption.setName("laFaultyPacketsCaption"); // NOI18N

        receivingStatisticsSeparator.setName("receivingStatisticsSeparator"); // NOI18N

        laReceived.setText(bundle.getString("MainFrame.laReceived.text")); // NOI18N
        laReceived.setName("laReceived"); // NOI18N

        laReceivingRate.setText(bundle.getString("MainFrame.laReceivingRate.text")); // NOI18N
        laReceivingRate.setName("laReceivingRate"); // NOI18N

        laLostPackets.setText(bundle.getString("MainFrame.laLostPackets.text")); // NOI18N
        laLostPackets.setName("laLostPackets"); // NOI18N

        laFaultyPackets.setText(bundle.getString("MainFrame.laFaultyPackets.text")); // NOI18N
        laFaultyPackets.setName("laFaultyPackets"); // NOI18N

        javax.swing.GroupLayout paReceivingStatisticsLayout = new javax.swing.GroupLayout(paReceivingStatistics);
        paReceivingStatistics.setLayout(paReceivingStatisticsLayout);
        paReceivingStatisticsLayout.setHorizontalGroup(
            paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(laReceivingStatisticsCaption)
                    .addComponent(receivingStatisticsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laReceivedCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(laReceived))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laReceivingRateCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(laReceivingRate))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laLostPacketsCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(laLostPackets))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laFaultyPacketsCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(laFaultyPackets)))
                .addContainerGap())
        );
        paReceivingStatisticsLayout.setVerticalGroup(
            paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laReceivingStatisticsCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receivingStatisticsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laReceivedCaption)
                    .addComponent(laReceived))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laReceivingRateCaption)
                    .addComponent(laReceivingRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laLostPacketsCaption)
                    .addComponent(laLostPackets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laFaultyPacketsCaption)
                    .addComponent(laFaultyPackets))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        receiverSplitPane.setRightComponent(paReceivingStatistics);

        paReceiverTableOuter.setName("paReceiverTableOuter"); // NOI18N
        paReceiverTableOuter.setLayout(new java.awt.BorderLayout());

        paReceiverButtons.setName("paReceiverButtons"); // NOI18N
        paReceiverButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buActivateReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_green.png"))); // NOI18N
        buActivateReceiver.setText(bundle.getString("MainFrame.buActivateReceiver.text")); // NOI18N
        buActivateReceiver.setEnabled(false);
        buActivateReceiver.setName("buActivateReceiver"); // NOI18N
        buActivateReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buActivateReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buActivateReceiver);

        buDeactivateReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_red.png"))); // NOI18N
        buDeactivateReceiver.setText(bundle.getString("MainFrame.buDeactivateReceiver.text")); // NOI18N
        buDeactivateReceiver.setEnabled(false);
        buDeactivateReceiver.setName("buDeactivateReceiver"); // NOI18N
        buDeactivateReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeactivateReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buDeactivateReceiver);

        buAddReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_green.png"))); // NOI18N
        buAddReceiver.setText(bundle.getString("MainFrame.buAddReceiver.text")); // NOI18N
        buAddReceiver.setName("buAddReceiver"); // NOI18N
        buAddReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buAddReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buAddReceiver);

        buShowReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preview.png"))); // NOI18N
        buShowReceiver.setText(bundle.getString("MainFrame.buShowReceiver.text")); // NOI18N
        buShowReceiver.setEnabled(false);
        buShowReceiver.setName("buShowReceiver"); // NOI18N
        buShowReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buShowReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buShowReceiver);

        buEditReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        buEditReceiver.setText(bundle.getString("MainFrame.buEditReceiver.text")); // NOI18N
        buEditReceiver.setEnabled(false);
        buEditReceiver.setName("buEditReceiver"); // NOI18N
        buEditReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buEditReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buEditReceiver);

        buDeleteReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        buDeleteReceiver.setText(bundle.getString("MainFrame.buDeleteReceiver.text")); // NOI18N
        buDeleteReceiver.setEnabled(false);
        buDeleteReceiver.setName("buDeleteReceiver"); // NOI18N
        buDeleteReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeleteReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buDeleteReceiver);

        paReceiverTableOuter.add(paReceiverButtons, java.awt.BorderLayout.PAGE_END);

        paReceiverTableInner.setName("paReceiverTableInner"); // NOI18N
        paReceiverTableInner.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        receiverTable.setGridColor(javax.swing.UIManager.getDefaults().getColor("control"));
        receiverTable.setIntercellSpacing(new java.awt.Dimension(0, 1));
        receiverTable.setName("receiverTable"); // NOI18N
        receiverTable.getSelectionModel().addListSelectionListener(this);
        jScrollPane1.setViewportView(receiverTable);

        paReceiverTableInner.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        paReceiverTableOuter.add(paReceiverTableInner, java.awt.BorderLayout.CENTER);

        paReceiverTableCaption.setName("paReceiverTableCaption"); // NOI18N
        paReceiverTableCaption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        laReceiverTableCaption.setText(bundle.getString("MainFrame.laReceiverTableCaption.text")); // NOI18N
        laReceiverTableCaption.setName("laReceiverTableCaption"); // NOI18N
        paReceiverTableCaption.add(laReceiverTableCaption);

        laReceiverTableIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/receiver.png"))); // NOI18N
        laReceiverTableIcon.setName("laReceiverTableIcon"); // NOI18N
        paReceiverTableCaption.add(laReceiverTableIcon);

        paReceiverTableOuter.add(paReceiverTableCaption, java.awt.BorderLayout.NORTH);

        receiverSplitPane.setLeftComponent(paReceiverTableOuter);

        mainSplitPane.setRightComponent(receiverSplitPane);

        menuBar.setName("menuBar"); // NOI18N

        menuFile.setText(bundle.getString("MainFrame.menuFile.text")); // NOI18N
        menuFile.setName("menuFile"); // NOI18N
        menuFile.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuFileMenuSelected(evt);
            }
        });

        miOpenProfile.setText(bundle.getString("MainFrame.miOpenProfile.text")); // NOI18N
        miOpenProfile.setName("miOpenProfile"); // NOI18N
        miOpenProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenProfileActionPerformed(evt);
            }
        });
        menuFile.add(miOpenProfile);

        miSaveProfile.setText(bundle.getString("MainFrame.miSaveProfile.text")); // NOI18N
        miSaveProfile.setEnabled(false);
        miSaveProfile.setName("miSaveProfile"); // NOI18N
        miSaveProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveProfileActionPerformed(evt);
            }
        });
        menuFile.add(miSaveProfile);

        miSaveProfileAs.setText(bundle.getString("MainFrame.miSaveProfileAs.text")); // NOI18N
        miSaveProfileAs.setName("miSaveProfileAs"); // NOI18N
        miSaveProfileAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveProfileAsActionPerformed(evt);
            }
        });
        menuFile.add(miSaveProfileAs);

        jSeparator1.setName("jSeparator1"); // NOI18N
        menuFile.add(jSeparator1);

        miPreferences.setText(bundle.getString("MainFrame.miPreferences.text")); // NOI18N
        miPreferences.setName("miPreferences"); // NOI18N
        miPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPreferencesActionPerformed(evt);
            }
        });
        menuFile.add(miPreferences);

        sepBeforeRecentProfiles.setName("sepBeforeRecentProfiles"); // NOI18N
        menuFile.add(sepBeforeRecentProfiles);

        sepAfterRecentProfiles.setName("sepAfterRecentProfiles"); // NOI18N
        menuFile.add(sepAfterRecentProfiles);

        miExit.setText(bundle.getString("MainFrame.miExit.text")); // NOI18N
        miExit.setName("miExit"); // NOI18N
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        menuBar.add(menuFile);

        menuHelp.setText(bundle.getString("MainFrame.menuHelp.text")); // NOI18N
        menuHelp.setName("menuHelp"); // NOI18N

        miAbout.setText(bundle.getString("MainFrame.miAbout.text")); // NOI18N
        miAbout.setName("miAbout"); // NOI18N
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        miHelp.setText(bundle.getString("MainFrame.miHelp.text")); // NOI18N
        miHelp.setName("miHelp"); // NOI18N
        menuHelp.add(miHelp);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buActivateSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buActivateSenderActionPerformed
        for(Sender s : senderTable.getSelectedSenders()) {
            s.activate();
        }
        refreshSenderControls();
    }//GEN-LAST:event_buActivateSenderActionPerformed

    /**
     * assumption: there is only one row selected!
     * @param evt
     */
    private void buShowSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buShowSenderActionPerformed
        Sender s = senderTable.getSelectedSenders().get(0);
        ShowSenderDialog dlg = new ShowSenderDialog(this, true, s);
        s.addSenderDataChangeListener(dlg);
        dlg.setVisible(true);
    }//GEN-LAST:event_buShowSenderActionPerformed

    private void buAddSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buAddSenderActionPerformed
        if(senderTable.getSelectedRowCount() > 0) {
            Sender s = senderTable.getSelectedSenders().get(0);
            new EditSenderDialog(this, true, s, true).setVisible(true);
        } else {
            new EditSenderDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_buAddSenderActionPerformed

    private void buDeactivateSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeactivateSenderActionPerformed
        for(Sender s : senderTable.getSelectedSenders()) {
            s.deactivate();
        }
        refreshSenderControls();
    }//GEN-LAST:event_buDeactivateSenderActionPerformed

    private void buAddReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buAddReceiverActionPerformed
        List<ReceiverGroup> selectedGroups = receiverTable.getSelectedReceiverGroups();
        if(selectedGroups.size() > 0) {
            ReceiverGroup rg = selectedGroups.get(0);
            new EditReceiverDialog(this, true, rg, true).setVisible(true);
        } else {
            new EditReceiverDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_buAddReceiverActionPerformed

    private void senderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_senderTableMouseClicked
        if(evt.getClickCount() == 2) {
            if(senderTable.getSelectedSenders().size() == 1) {
                Sender sender = senderTable.getSelectedSenders().get(0);
                new EditSenderDialog(this, true, sender, false).setVisible(true);
            }
        }
    }//GEN-LAST:event_senderTableMouseClicked

    /**
     * assumption: there is only one sender selected!
     * @param evt
     */
    private void buEditSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buEditSenderActionPerformed
        Sender s = senderTable.getSelectedSenders().get(0);
        new EditSenderDialog(this, true, s, false).setVisible(true);
        refreshSenderControls();
    }//GEN-LAST:event_buEditSenderActionPerformed

    private void buDeleteSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeleteSenderActionPerformed
        Set<MulticastStream> senders = new HashSet<MulticastStream>(senderTable.getSelectedSenders());
        this.view.removeStreams(senders);
    }//GEN-LAST:event_buDeleteSenderActionPerformed

    /**
     * assumption: there is at least one receivergroup selected!
     * @param evt
     */
    private void buActivateReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buActivateReceiverActionPerformed
        for(ReceiverGroup r : receiverTable.getSelectedReceiverGroups()) {
            r.activate();
        }
        refreshReceiverControls();
    }//GEN-LAST:event_buActivateReceiverActionPerformed

    /**
     * assumption: there is at least one receivergroup selected!
     * @param evt
     */
    private void buDeactivateReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeactivateReceiverActionPerformed
        for(ReceiverGroup r : receiverTable.getSelectedReceiverGroups()) {
            r.deactivate();
        }
        refreshReceiverControls();
    }//GEN-LAST:event_buDeactivateReceiverActionPerformed

    /**
     * assumption: there is only one receiver selected.
     * @param evt
     */
    private void buShowReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buShowReceiverActionPerformed
        Receiver r = receiverTable.getSelectedReceivers().get(0);
        ReceiverGroup rg = receiverTable.getParent(r);
        ShowReceiverDialog dlg = new ShowReceiverDialog(this, true, r, rg);
        dlg.setVisible(true);
    }//GEN-LAST:event_buShowReceiverActionPerformed

    /**
     * assumption: there are only rows selected to be associated with exactly
     * one receivergroup
     * @param evt
     */
    private void buEditReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buEditReceiverActionPerformed
        ReceiverGroup rg = receiverTable.getSelectedReceiverGroups().get(0);
        new EditReceiverDialog(this, true, rg, false).setVisible(true);
        refreshReceiverControls();
    }//GEN-LAST:event_buEditReceiverActionPerformed

    private void buDeleteReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeleteReceiverActionPerformed
        Set<MulticastStream> groups = new HashSet<MulticastStream>(receiverTable.getSelectedReceiverGroups());
        Set<Receiver> receivers   = new HashSet<Receiver>(receiverTable.getSelectedReceivers());
        for(Receiver r : receivers) {
            ReceiverGroup parent = receiverTable.getParent(r);
            parent.removeReceiver(r);
            receiverTable.receiverRemoved(r);
        }
        view.removeStreams(groups);
    }//GEN-LAST:event_buDeleteReceiverActionPerformed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        senderTable.clearSelection();
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        receiverTable.clearSelection();
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void miOpenProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenProfileActionPerformed
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            view.loadProfile(chooser.getSelectedFile());
        }
        if(view.getCurrentProfile() != null) {
            miSaveProfile.setEnabled(true);
        } else {
            miSaveProfile.setEnabled(false);
        }
    }//GEN-LAST:event_miOpenProfileActionPerformed

    private void miSaveProfileAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveProfileAsActionPerformed
        SaveProfileDialog dlg = new SaveProfileDialog(this, true);
        dlg.setVisible(true);
        if(dlg.getSelection().equals(JFileChooser.APPROVE_SELECTION)) {
            view.saveProfile(dlg.getProfileName(), dlg.getSelectedFile());
        }
        loadRecentProfiles();
        if(view.getCurrentProfile() != null) {
            miSaveProfile.setEnabled(true);
        } else {
            miSaveProfile.setEnabled(false);
        }
    }//GEN-LAST:event_miSaveProfileAsActionPerformed

    private void miSaveProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveProfileActionPerformed
        view.saveCurrentProfile();
        if(view.getCurrentProfile() != null) {
            miSaveProfile.setEnabled(true);
        } else {
            miSaveProfile.setEnabled(false);
        }
    }//GEN-LAST:event_miSaveProfileActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO use the controller's exit method!
        this.dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    private void miPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPreferencesActionPerformed
        new PreferencesDialog(this, false).setVisible(true);
    }//GEN-LAST:event_miPreferencesActionPerformed

    private void menuFileMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuFileMenuSelected
        loadRecentProfiles();
    }//GEN-LAST:event_menuFileMenuSelected

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame = new MainFrame();
                frame.setVisible(true);
                frame.test();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buActivateReceiver;
    private javax.swing.JButton buActivateSender;
    private javax.swing.JButton buAddReceiver;
    private javax.swing.JButton buAddSender;
    private javax.swing.JButton buDeactivateReceiver;
    private javax.swing.JButton buDeactivateSender;
    private javax.swing.JButton buDeleteReceiver;
    private javax.swing.JButton buDeleteSender;
    private javax.swing.JButton buEditReceiver;
    private javax.swing.JButton buEditSender;
    private javax.swing.JButton buShowReceiver;
    private javax.swing.JButton buShowSender;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel laFaultyPackets;
    private javax.swing.JLabel laFaultyPacketsCaption;
    private javax.swing.JLabel laLostPackets;
    private javax.swing.JLabel laLostPacketsCaption;
    private javax.swing.JLabel laReceived;
    private javax.swing.JLabel laReceivedCaption;
    private javax.swing.JLabel laReceiverTableCaption;
    private javax.swing.JLabel laReceiverTableIcon;
    private javax.swing.JLabel laReceivingRate;
    private javax.swing.JLabel laReceivingRateCaption;
    private javax.swing.JLabel laReceivingStatisticsCaption;
    private javax.swing.JLabel laSenderRate;
    private javax.swing.JLabel laSenderRateCaption;
    private javax.swing.JLabel laSenderTableCaption;
    private javax.swing.JLabel laSendingStatistics;
    private javax.swing.JLabel laSent;
    private javax.swing.JLabel laSentCaption;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miHelp;
    private javax.swing.JMenuItem miOpenProfile;
    private javax.swing.JMenuItem miPreferences;
    private javax.swing.JMenuItem miSaveProfile;
    private javax.swing.JMenuItem miSaveProfileAs;
    private javax.swing.JPanel paReceiverButtons;
    private javax.swing.JPanel paReceiverTableCaption;
    private javax.swing.JPanel paReceiverTableInner;
    private javax.swing.JPanel paReceiverTableOuter;
    private javax.swing.JPanel paReceivingStatistics;
    private javax.swing.JPanel paSenderButtons;
    private javax.swing.JPanel paSenderTableCaption;
    private javax.swing.JPanel paSenderTableInner;
    private javax.swing.JPanel paSenderTableOuter;
    private javax.swing.JPanel paSendingStatistics;
    private javax.swing.JSplitPane receiverSplitPane;
    private com.spam.mctool.view.main.receivertable.JReceiverTable receiverTable;
    private javax.swing.JSeparator receivingStatisticsSeparator;
    private javax.swing.JSplitPane senderSplitPane;
    private com.spam.mctool.view.main.sendertable.JSenderTable senderTable;
    private javax.swing.JLabel senderTableIcon;
    private javax.swing.JSeparator sendingStatisticsSeparator;
    private javax.swing.JPopupMenu.Separator sepAfterRecentProfiles;
    private javax.swing.JPopupMenu.Separator sepBeforeRecentProfiles;
    private com.spam.mctool.view.main.sendertable.SenderStateRenderer statusRenderer1;
    private com.spam.mctool.view.main.TwoColorRenderer twoColorRenderer1;
    // End of variables declaration//GEN-END:variables

    // Custom variables declaration
    private JFileChooser chooser;

    public MainFrameState getSessionState() {
        MainFrameState state = new MainFrameState();
        state.setXPosition(this.getX());
        state.setYPosition(this.getY());
        state.setHeight(this.getHeight());
        state.setWidth(this.getWidth());
        state.setWindowState(this.getExtendedState());
        return state;
    }

    public void setSessionState(MainFrameState state) {
        this.setLocation(state.getXPosition(), state.getYPosition());
        this.setSize(state.getWidth(), state.getHeight());
        this.setExtendedState(state.getWindowState());
    }

    private void test() {
        ReceiverTableModel tableModel = (ReceiverTableModel)receiverTable.getModel();
    }

    /**
     * Tells the GUI controller to create a new sender and optionally activate it
     * afterwards. Provides feedback, whether the operation was successful or not.
     * More information about why the creation has failed will be communicated
     * via ErrorEvents.
     * @param senderMap Map containing parameters for the sender to be created.
     * The map's contents are specified in SenderManager.
     * @param activate Shall the sender be activated after creation?
     * @return True, if the sender was created successfully. False, if the Sender
     * could not be created.
     */
    public boolean addSender(Map<String, String> senderMap, boolean activate) {
        return this.view.addSender(senderMap, activate);
    }

    public void senderAdded(SenderAddedOrRemovedEvent e) {
        senderTable.senderAdded(e);
    }

    public void senderRemoved(SenderAddedOrRemovedEvent e) {
        senderTable.senderRemoved(e);
    }

    public void dataChanged(SenderDataChangedEvent e) {

        // update the sender table
        senderTable.dataChanged(e);
    }

    public void receiverGroupAdded(ReceiverAddedOrRemovedEvent e) {
        receiverTable.receiverGroupAdded(e);
    }

    public void receiverGroupRemoved(ReceiverAddedOrRemovedEvent e) {
        receiverTable.receiverGroupRemoved(e);
    }

    public void dataChanged(ReceiverDataChangedEvent e) {

        // update the receiver table
        receiverTable.dataChanged(e);
    }

    /**
     * Tells the GUI controller to add a receiver group to this view's
     * controller and optionally activate it
     * afterwards. Provides feedback, whether the operation was successful or not.
     * More information about why the creation has failed will be communicated
     * via ErrorEvents.
     * @param receiverMap Map containing parameters for the receiver group to be created.
     * The map's contents are specified in ReceiverManager.
     * @param activate Shall the receiver group be activated after creation?
     * @return True, if the receiver group was created successfully. False, if
     * rhe receiver group could not be created.
     */
    public boolean addReceiverGroup(Map<String, String> receiverMap, boolean activate) {
        return this.view.addReceiverGroup(receiverMap, activate);
    }

    public void valueChanged(ListSelectionEvent e) {
        if(e.getSource() == senderTable.getSelectionModel()) {
            refreshSenderControls();
        } else if (e.getSource() == receiverTable.getSelectionModel()) {
            refreshReceiverControls();
        }
    }

    private void refreshSenderControls() {
        int rc = senderTable.getSelectedRowCount();
        if(rc == 0) {
            buActivateSender.setEnabled(false);
            buDeactivateSender.setEnabled(false);
            buShowSender.setEnabled(false);
            buEditSender.setEnabled(false);
            buDeleteSender.setEnabled(false);
        } else if (rc == 1) {
            buShowSender.setEnabled(true);
            buEditSender.setEnabled(true);
            buDeleteSender.setEnabled(true);
            if(senderTable.getSelectedSenders().get(0).isActive()) {
                buActivateSender.setEnabled(false);
                buDeactivateSender.setEnabled(true);
            } else {
                buActivateSender.setEnabled(true);
                buDeactivateSender.setEnabled(false);
            }
        } else if (rc > 1) {
            buActivateSender.setEnabled(true);
            buDeactivateSender.setEnabled(true);
            buShowSender.setEnabled(false);
            buEditSender.setEnabled(false);
            buDeleteSender.setEnabled(true);
        }
    }

    private void refreshReceiverControls() {
        int rowCount = receiverTable.getSelectedRowCount();

        if(rowCount > 0) {
            // Activate/Deactivate Buttons
            if(receiverTable.getSelectedReceiverGroups().size() == 1) {
                buDeactivateReceiver.setEnabled(receiverTable.getSelectedReceiverGroups().get(0).isActive());
                buActivateReceiver.setEnabled(!receiverTable.getSelectedReceiverGroups().get(0).isActive());
            } else if (receiverTable.getSelectedReceiverGroups().size() > 1){
                buDeactivateReceiver.setEnabled(true);
                buActivateReceiver.setEnabled(true);
            } else {
                buDeactivateReceiver.setEnabled(false);
                buActivateReceiver.setEnabled(false);
            }

            // Show Button
            buShowReceiver.setEnabled(receiverTable.getSelectedReceivers().size() == 1);

            // Edit Button
            buEditReceiver.setEnabled(receiverTable.getSelectedReceiverGroups().size() == 1);

            // Delete Button
            buDeleteReceiver.setEnabled(true);
        } else {
            buActivateReceiver.setEnabled(false);
            buDeactivateReceiver.setEnabled(false);
            buShowReceiver.setEnabled(false);
            buEditReceiver.setEnabled(false);
            buDeleteReceiver.setEnabled(false);
        }
    }

    public void profileChanged(ProfileChangeEvent e) {
        setTitle(java.util.ResourceBundle.getBundle("internationalization/Bundle").getString("MainFrame.title") + ((view.getCurrentProfile() != null && view.getCurrentProfile().getName() != null) ? " - " + view.getCurrentProfile().getName() : ""));
    }

    private void loadRecentProfiles() {
        javax.swing.JMenuItem miRecentProfile;
        
        // get a list of profile items in menu. Also determine the position where
        // to insert the new items.
        List<JMenuItem> profileItems = new ArrayList<JMenuItem>();
        int insertPos = 0;
        boolean passedSeparator = false;
        for(int i=0; i< menuFile.getMenuComponentCount(); i++) {
            if(menuFile.getMenuComponent(i) == sepBeforeRecentProfiles) {
                passedSeparator = true;
                insertPos = i+1;
                continue;
            }
            if(menuFile.getMenuComponent(i) == sepAfterRecentProfiles) {
                break;
            }
            if(passedSeparator) {
                profileItems.add((JMenuItem)menuFile.getMenuComponent(i));
            }
        }
        
        // remove profile items from menu
        for(JMenuItem item : profileItems) {
            menuFile.remove(item);
        }

        // set insert position to end of menu as fallback solution
        if(insertPos == 0) {
            insertPos = menuFile.getMenuComponentCount();
        }

        // add the profiles
        for(Profile p : view.getRecentProfiles()) {
            miRecentProfile = new javax.swing.JMenuItem();
            miRecentProfile.setText(p.getName());
            miRecentProfile.setName("miRecentProfile" + p.getName());
            miRecentProfile.setActionCommand(p.getName());
            miRecentProfile.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    for(Profile p : view.getRecentProfiles()) {
                        if(p.getName().equals(evt.getActionCommand())) {
                            view.loadProfile(p.getPath());
                            return;
                        }
                    }
                }
            });
            menuFile.insert(miRecentProfile, insertPos++);
        }
    }

    public void overallReceiverStatisticsUpdated(OverallReceiverStatisticsUpdatedEvent e) {
        ReceiverManager rm = e.getSource();
        laReceived.setText(Long.toString(rm.getOverallReceivedPackets()));
        laReceivingRate.setText(Long.toString(rm.getOverallReceivedPPS()));
        laLostPackets.setText(Long.toString(rm.getOverallLostPackets()));
        laFaultyPackets.setText(Long.toString(rm.getOverallFaultyPackets()));
    }

    public void overallSenderStatisticsUpdated(OverallSenderStatisticsUpdatedEvent e) {
        SenderManager sm = e.getSource();
        laSent.setText(Long.toString(sm.getOverallSentPackets()));
        laSenderRate.setText(Long.toString(sm.getOverallSentPPS()));
    }

    private void initCustomComponents() {
        chooser = new JFileChooser();
    }





}
