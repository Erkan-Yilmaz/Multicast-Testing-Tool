/*
 * MainFrame.java
 *
 * Created on Mar 3, 2011, 4:57:17 PM
 */

package com.spam.mctool.view.main;

import com.spam.mctool.intermediates.ReceiverAddedOrRemovedEvent;
import com.spam.mctool.intermediates.ReceiverDataChangedEvent;
import com.spam.mctool.intermediates.SenderAddedOrRemovedEvent;
import com.spam.mctool.intermediates.SenderDataChangedEvent;
import com.spam.mctool.model.MulticastStream;
import com.spam.mctool.model.Receiver;
import com.spam.mctool.model.ReceiverGroup;
import com.spam.mctool.model.Sender;
import com.spam.mctool.view.GraphicalView;
import com.spam.mctool.view.dialogs.EditReceiverDialog;
import com.spam.mctool.view.dialogs.EditSenderDialog;
import com.spam.mctool.view.dialogs.ShowReceiverDialog;
import com.spam.mctool.view.dialogs.ShowSenderDialog;
import com.spam.mctool.view.main.receivertable.ReceiverTableModel;
import com.spam.mctool.view.main.sendertable.JSenderTable;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Tobias St√∂ckel (Tobias.Stoeckel@de.ibm.com)
 */
public class MainFrame extends javax.swing.JFrame implements javax.swing.event.ListSelectionListener {

    private static final long serialVersionUID = 1L;
    private GraphicalView view;

    /** Creates new form MainFrame */
    public MainFrame() {
        this(null);
    }

    public MainFrame(GraphicalView view) {
        this.view = view;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusRenderer1 = new com.spam.mctool.view.main.sendertable.SenderStateRenderer();
        twoColorRenderer1 = new com.spam.mctool.view.main.TwoColorRenderer();
        mainSplitPane = new javax.swing.JSplitPane();
        senderSplitPane = new javax.swing.JSplitPane();
        paSendingStatistics = new javax.swing.JPanel();
        laSendingStatistics = new javax.swing.JLabel();
        laSentCaption = new javax.swing.JLabel();
        laSenderRateCaption = new javax.swing.JLabel();
        sendingStatisticsSeparator = new javax.swing.JSeparator();
        laSent = new javax.swing.JLabel();
        laSenderRate = new javax.swing.JLabel();
        paSenderTableOuter = new javax.swing.JPanel();
        paSenderButtons = new javax.swing.JPanel();
        buActivateSender = new javax.swing.JButton();
        buDeactivateSender = new javax.swing.JButton();
        buAddSender = new javax.swing.JButton();
        buShowSender = new javax.swing.JButton();
        buEditSender = new javax.swing.JButton();
        buDeleteSender = new javax.swing.JButton();
        paSenderTableInner = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        senderTable = new com.spam.mctool.view.main.sendertable.JSenderTable();
        paSenderTableCaption = new javax.swing.JPanel();
        laSenderTableCaption = new javax.swing.JLabel();
        senderTableIcon = new javax.swing.JLabel();
        receiverSplitPane = new javax.swing.JSplitPane();
        paReceivingStatistics = new javax.swing.JPanel();
        laReceivingStatisticsCaption = new javax.swing.JLabel();
        laReceivedCaption = new javax.swing.JLabel();
        laReceivingRateCaption = new javax.swing.JLabel();
        laLostPacketsCaption = new javax.swing.JLabel();
        laFaultyPacketsCaption = new javax.swing.JLabel();
        receivingStatisticsSeparator = new javax.swing.JSeparator();
        laReceived = new javax.swing.JLabel();
        laReceivingRate = new javax.swing.JLabel();
        laLostPackets = new javax.swing.JLabel();
        laFaultyPackets = new javax.swing.JLabel();
        paReceiverTableOuter = new javax.swing.JPanel();
        paReceiverButtons = new javax.swing.JPanel();
        buActivateReceiver = new javax.swing.JButton();
        buDeactivateReceiver = new javax.swing.JButton();
        buAddReceiver = new javax.swing.JButton();
        buShowReceiver = new javax.swing.JButton();
        buEditReceiver = new javax.swing.JButton();
        buDeleteReceiver = new javax.swing.JButton();
        paReceiverTableInner = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiverTable = new com.spam.mctool.view.main.receivertable.JReceiverTable();
        paReceiverTableCaption = new javax.swing.JPanel();
        laReceiverTableCaption = new javax.swing.JLabel();
        laReceiverTableIcon = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miOpenProfile = new javax.swing.JMenuItem();
        miSaveProfile = new javax.swing.JMenuItem();
        miSaveProfileAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miPreferences = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        menuSender = new javax.swing.JMenu();
        miShowSenders = new javax.swing.JCheckBoxMenuItem();
        miShowSendingStatistics = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miSenderActivate = new javax.swing.JMenuItem();
        miSenderDeactivate = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        miSenderAdd = new javax.swing.JMenuItem();
        miSenderEdit = new javax.swing.JMenuItem();
        miSenderDelete = new javax.swing.JMenuItem();
        miSenderDetails = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        miSenderSelectAll = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        miSenderActivateAll = new javax.swing.JMenuItem();
        miSenderDeactivateAll = new javax.swing.JMenuItem();
        miSenderDeleteAll = new javax.swing.JMenuItem();
        menuReceiver = new javax.swing.JMenu();
        miShowReceivers = new javax.swing.JCheckBoxMenuItem();
        miShowReceivingStatistics = new javax.swing.JCheckBoxMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        miReceiverActivate = new javax.swing.JMenuItem();
        miReceiverDeactivate = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        miReceiverAdd = new javax.swing.JMenuItem();
        miReceiverEdit = new javax.swing.JMenuItem();
        miReceiverDelete = new javax.swing.JMenuItem();
        mirReceiverDetails = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        miReceiverSelectAll = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        miReceiverActivateAll = new javax.swing.JMenuItem();
        miReceiverDeactivateAll = new javax.swing.JMenuItem();
        miReceiverDeleteAll = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();
        miHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("internationalization/Bundle"); // NOI18N
        setTitle(bundle.getString("MainFrame.title")); // NOI18N

        mainSplitPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainSplitPane.setDividerLocation(267);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplitPane.setResizeWeight(0.5);
        mainSplitPane.setContinuousLayout(true);
        mainSplitPane.setOneTouchExpandable(true);

        senderSplitPane.setBorder(null);
        senderSplitPane.setDividerLocation(590);
        senderSplitPane.setResizeWeight(1.0);
        senderSplitPane.setContinuousLayout(true);
        senderSplitPane.setOneTouchExpandable(true);

        laSendingStatistics.setText(bundle.getString("MainFrame.laSendingStatistics.text")); // NOI18N

        laSentCaption.setText(bundle.getString("MainFrame.laSentCaption.text")); // NOI18N

        laSenderRateCaption.setText(bundle.getString("MainFrame.laSenderRateCaption.text")); // NOI18N

        laSent.setText(bundle.getString("MainFrame.laSent.text")); // NOI18N

        laSenderRate.setText(bundle.getString("MainFrame.laSenderRate.text")); // NOI18N

        javax.swing.GroupLayout paSendingStatisticsLayout = new javax.swing.GroupLayout(paSendingStatistics);
        paSendingStatistics.setLayout(paSendingStatisticsLayout);
        paSendingStatisticsLayout.setHorizontalGroup(
            paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendingStatisticsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(laSendingStatistics)
                    .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                        .addComponent(laSentCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(laSent))
                    .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                        .addComponent(laSenderRateCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(laSenderRate)))
                .addContainerGap())
        );
        paSendingStatisticsLayout.setVerticalGroup(
            paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paSendingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laSendingStatistics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendingStatisticsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laSentCaption)
                    .addComponent(laSent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paSendingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laSenderRateCaption)
                    .addComponent(laSenderRate))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        senderSplitPane.setRightComponent(paSendingStatistics);

        paSenderTableOuter.setLayout(new java.awt.BorderLayout());

        paSenderButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buActivateSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_green.png"))); // NOI18N
        buActivateSender.setText(bundle.getString("MainFrame.buActivateSender.text")); // NOI18N
        buActivateSender.setEnabled(false);
        buActivateSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buActivateSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buActivateSender);

        buDeactivateSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_red.png"))); // NOI18N
        buDeactivateSender.setText(bundle.getString("MainFrame.buDeactivateSender.text")); // NOI18N
        buDeactivateSender.setEnabled(false);
        buDeactivateSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeactivateSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buDeactivateSender);

        buAddSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_green.png"))); // NOI18N
        buAddSender.setText(bundle.getString("MainFrame.buAddSender.text")); // NOI18N
        buAddSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buAddSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buAddSender);

        buShowSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preview.png"))); // NOI18N
        buShowSender.setText(bundle.getString("MainFrame.buShowSender.text")); // NOI18N
        buShowSender.setEnabled(false);
        buShowSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buShowSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buShowSender);

        buEditSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        buEditSender.setText(bundle.getString("MainFrame.buEditSender.text")); // NOI18N
        buEditSender.setEnabled(false);
        buEditSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buEditSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buEditSender);

        buDeleteSender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        buDeleteSender.setText(bundle.getString("MainFrame.buDeleteSender.text")); // NOI18N
        buDeleteSender.setEnabled(false);
        buDeleteSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeleteSenderActionPerformed(evt);
            }
        });
        paSenderButtons.add(buDeleteSender);

        paSenderTableOuter.add(paSenderButtons, java.awt.BorderLayout.SOUTH);

        paSenderTableInner.setLayout(new java.awt.BorderLayout());

        senderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                senderTableMouseClicked(evt);
            }
        });
        senderTable.getSelectionModel().addListSelectionListener(this);
        jScrollPane2.setViewportView(senderTable);

        paSenderTableInner.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        paSenderTableOuter.add(paSenderTableInner, java.awt.BorderLayout.CENTER);

        paSenderTableCaption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        laSenderTableCaption.setText(bundle.getString("MainFrame.laSenderTableCaption.text")); // NOI18N
        paSenderTableCaption.add(laSenderTableCaption);

        senderTableIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sender.png"))); // NOI18N
        paSenderTableCaption.add(senderTableIcon);

        paSenderTableOuter.add(paSenderTableCaption, java.awt.BorderLayout.NORTH);

        senderSplitPane.setLeftComponent(paSenderTableOuter);

        mainSplitPane.setTopComponent(senderSplitPane);

        receiverSplitPane.setBorder(null);
        receiverSplitPane.setDividerLocation(590);
        receiverSplitPane.setResizeWeight(1.0);
        receiverSplitPane.setContinuousLayout(true);
        receiverSplitPane.setOneTouchExpandable(true);

        laReceivingStatisticsCaption.setText(bundle.getString("MainFrame.laReceivingStatisticsCaption.text")); // NOI18N

        laReceivedCaption.setText(bundle.getString("MainFrame.laReceivedCaption.text")); // NOI18N

        laReceivingRateCaption.setText(bundle.getString("MainFrame.laReceivingRateCaption.text")); // NOI18N

        laLostPacketsCaption.setText(bundle.getString("MainFrame.laLostPacketsCaption.text")); // NOI18N

        laFaultyPacketsCaption.setText(bundle.getString("MainFrame.laFaultyPacketsCaption.text")); // NOI18N

        laReceived.setText(bundle.getString("MainFrame.laReceived.text")); // NOI18N

        laReceivingRate.setText(bundle.getString("MainFrame.laReceivingRate.text")); // NOI18N

        laLostPackets.setText(bundle.getString("MainFrame.laLostPackets.text")); // NOI18N

        laFaultyPackets.setText(bundle.getString("MainFrame.laFaultyPackets.text")); // NOI18N

        javax.swing.GroupLayout paReceivingStatisticsLayout = new javax.swing.GroupLayout(paReceivingStatistics);
        paReceivingStatistics.setLayout(paReceivingStatisticsLayout);
        paReceivingStatisticsLayout.setHorizontalGroup(
            paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(laReceivingStatisticsCaption)
                    .addComponent(receivingStatisticsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laReceivedCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(laReceived))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laReceivingRateCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(laReceivingRate))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laLostPacketsCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(laLostPackets))
                    .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                        .addComponent(laFaultyPacketsCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(laFaultyPackets)))
                .addContainerGap())
        );
        paReceivingStatisticsLayout.setVerticalGroup(
            paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paReceivingStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(laReceivingStatisticsCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receivingStatisticsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laReceivedCaption)
                    .addComponent(laReceived))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laReceivingRateCaption)
                    .addComponent(laReceivingRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laLostPacketsCaption)
                    .addComponent(laLostPackets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paReceivingStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laFaultyPacketsCaption)
                    .addComponent(laFaultyPackets))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        receiverSplitPane.setRightComponent(paReceivingStatistics);

        paReceiverTableOuter.setLayout(new java.awt.BorderLayout());

        paReceiverButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buActivateReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_green.png"))); // NOI18N
        buActivateReceiver.setText(bundle.getString("MainFrame.buActivateReceiver.text")); // NOI18N
        buActivateReceiver.setEnabled(false);
        buActivateReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buActivateReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buActivateReceiver);

        buDeactivateReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_red.png"))); // NOI18N
        buDeactivateReceiver.setText(bundle.getString("MainFrame.buDeactivateReceiver.text")); // NOI18N
        buDeactivateReceiver.setEnabled(false);
        buDeactivateReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buDeactivateReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buDeactivateReceiver);

        buAddReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_green.png"))); // NOI18N
        buAddReceiver.setText(bundle.getString("MainFrame.buAddReceiver.text")); // NOI18N
        buAddReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buAddReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buAddReceiver);

        buShowReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preview.png"))); // NOI18N
        buShowReceiver.setText(bundle.getString("MainFrame.buShowReceiver.text")); // NOI18N
        buShowReceiver.setEnabled(false);
        buShowReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buShowReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buShowReceiver);

        buEditReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        buEditReceiver.setText(bundle.getString("MainFrame.buEditReceiver.text")); // NOI18N
        buEditReceiver.setEnabled(false);
        buEditReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buEditReceiverActionPerformed(evt);
            }
        });
        paReceiverButtons.add(buEditReceiver);

        buDeleteReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        buDeleteReceiver.setText(bundle.getString("MainFrame.buDeleteReceiver.text")); // NOI18N
        buDeleteReceiver.setEnabled(false);
        paReceiverButtons.add(buDeleteReceiver);

        paReceiverTableOuter.add(paReceiverButtons, java.awt.BorderLayout.PAGE_END);

        paReceiverTableInner.setLayout(new java.awt.BorderLayout());

        receiverTable.setGridColor(javax.swing.UIManager.getDefaults().getColor("control"));
        receiverTable.setIntercellSpacing(new java.awt.Dimension(0, 1));
        receiverTable.getSelectionModel().addListSelectionListener(this);
        jScrollPane1.setViewportView(receiverTable);

        paReceiverTableInner.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        paReceiverTableOuter.add(paReceiverTableInner, java.awt.BorderLayout.CENTER);

        paReceiverTableCaption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        laReceiverTableCaption.setText(bundle.getString("MainFrame.laReceiverTableCaption.text")); // NOI18N
        paReceiverTableCaption.add(laReceiverTableCaption);

        laReceiverTableIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/receiver.png"))); // NOI18N
        paReceiverTableCaption.add(laReceiverTableIcon);

        paReceiverTableOuter.add(paReceiverTableCaption, java.awt.BorderLayout.NORTH);

        receiverSplitPane.setLeftComponent(paReceiverTableOuter);

        mainSplitPane.setRightComponent(receiverSplitPane);

        menuFile.setText(bundle.getString("MainFrame.menuFile.text")); // NOI18N

        miOpenProfile.setText(bundle.getString("MainFrame.miOpenProfile.text")); // NOI18N
        menuFile.add(miOpenProfile);

        miSaveProfile.setText(bundle.getString("MainFrame.miSaveProfile.text")); // NOI18N
        menuFile.add(miSaveProfile);

        miSaveProfileAs.setText(bundle.getString("MainFrame.miSaveProfileAs.text")); // NOI18N
        menuFile.add(miSaveProfileAs);
        menuFile.add(jSeparator1);

        miPreferences.setText(bundle.getString("MainFrame.miPreferences.text")); // NOI18N
        menuFile.add(miPreferences);
        menuFile.add(jSeparator2);

        miExit.setText(bundle.getString("MainFrame.miExit.text")); // NOI18N
        menuFile.add(miExit);

        menuBar.add(menuFile);

        menuSender.setText(bundle.getString("MainFrame.menuSender.text")); // NOI18N

        miShowSenders.setSelected(true);
        miShowSenders.setText(bundle.getString("MainFrame.miShowSenders.text")); // NOI18N
        menuSender.add(miShowSenders);

        miShowSendingStatistics.setSelected(true);
        miShowSendingStatistics.setText(bundle.getString("MainFrame.miShowSendingStatistics.text")); // NOI18N
        menuSender.add(miShowSendingStatistics);
        menuSender.add(jSeparator3);

        miSenderActivate.setText(bundle.getString("MainFrame.miSenderActivate.text")); // NOI18N
        menuSender.add(miSenderActivate);

        miSenderDeactivate.setText(bundle.getString("MainFrame.miSenderDeactivate.text")); // NOI18N
        menuSender.add(miSenderDeactivate);
        menuSender.add(jSeparator9);

        miSenderAdd.setText(bundle.getString("MainFrame.miSenderAdd.text")); // NOI18N
        menuSender.add(miSenderAdd);

        miSenderEdit.setText(bundle.getString("MainFrame.miSenderEdit.text")); // NOI18N
        menuSender.add(miSenderEdit);

        miSenderDelete.setText(bundle.getString("MainFrame.miSenderDelete.text")); // NOI18N
        menuSender.add(miSenderDelete);

        miSenderDetails.setText(bundle.getString("MainFrame.miSenderDetails.text")); // NOI18N
        menuSender.add(miSenderDetails);
        menuSender.add(jSeparator4);

        miSenderSelectAll.setText(bundle.getString("MainFrame.miSenderSelectAll.text")); // NOI18N
        menuSender.add(miSenderSelectAll);
        menuSender.add(jSeparator5);

        miSenderActivateAll.setText(bundle.getString("MainFrame.miSenderActivateAll.text")); // NOI18N
        menuSender.add(miSenderActivateAll);

        miSenderDeactivateAll.setText(bundle.getString("MainFrame.miSenderDeactivateAll.text")); // NOI18N
        menuSender.add(miSenderDeactivateAll);

        miSenderDeleteAll.setText(bundle.getString("MainFrame.miSenderDeleteAll.text")); // NOI18N
        menuSender.add(miSenderDeleteAll);

        menuBar.add(menuSender);

        menuReceiver.setText(bundle.getString("MainFrame.menuReceiver.text")); // NOI18N

        miShowReceivers.setSelected(true);
        miShowReceivers.setText(bundle.getString("MainFrame.miShowReceivers.text")); // NOI18N
        menuReceiver.add(miShowReceivers);

        miShowReceivingStatistics.setSelected(true);
        miShowReceivingStatistics.setText(bundle.getString("MainFrame.miShowReceivingStatistics.text")); // NOI18N
        menuReceiver.add(miShowReceivingStatistics);
        menuReceiver.add(jSeparator6);

        miReceiverActivate.setText(bundle.getString("MainFrame.miReceiverActivate.text")); // NOI18N
        menuReceiver.add(miReceiverActivate);

        miReceiverDeactivate.setText(bundle.getString("MainFrame.miReceiverDeactivate.text")); // NOI18N
        menuReceiver.add(miReceiverDeactivate);
        menuReceiver.add(jSeparator10);

        miReceiverAdd.setText(bundle.getString("MainFrame.miReceiverAdd.text")); // NOI18N
        menuReceiver.add(miReceiverAdd);

        miReceiverEdit.setText(bundle.getString("MainFrame.miReceiverEdit.text")); // NOI18N
        menuReceiver.add(miReceiverEdit);

        miReceiverDelete.setText(bundle.getString("MainFrame.miReceiverDelete.text")); // NOI18N
        menuReceiver.add(miReceiverDelete);

        mirReceiverDetails.setText(bundle.getString("MainFrame.mirReceiverDetails.text")); // NOI18N
        menuReceiver.add(mirReceiverDetails);
        menuReceiver.add(jSeparator7);

        miReceiverSelectAll.setText(bundle.getString("MainFrame.miReceiverSelectAll.text")); // NOI18N
        menuReceiver.add(miReceiverSelectAll);
        menuReceiver.add(jSeparator8);

        miReceiverActivateAll.setText(bundle.getString("MainFrame.miReceiverActivateAll.text")); // NOI18N
        menuReceiver.add(miReceiverActivateAll);

        miReceiverDeactivateAll.setText(bundle.getString("MainFrame.miReceiverDeactivateAll.text")); // NOI18N
        menuReceiver.add(miReceiverDeactivateAll);

        miReceiverDeleteAll.setText(bundle.getString("MainFrame.miReceiverDeleteAll.text")); // NOI18N
        menuReceiver.add(miReceiverDeleteAll);

        menuBar.add(menuReceiver);

        menuHelp.setText(bundle.getString("MainFrame.menuHelp.text")); // NOI18N

        miAbout.setText(bundle.getString("MainFrame.miAbout.text")); // NOI18N
        menuHelp.add(miAbout);

        miHelp.setText(bundle.getString("MainFrame.miHelp.text")); // NOI18N
        menuHelp.add(miHelp);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buActivateSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buActivateSenderActionPerformed
        for(Sender s : senderTable.getSelectedSenders()) {
            s.activate();
        }
    }//GEN-LAST:event_buActivateSenderActionPerformed

    /**
     * assumption: there is only one row selected!
     * @param evt
     */
    private void buShowSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buShowSenderActionPerformed
        Sender s = senderTable.getSelectedSenders().get(0);
        ShowSenderDialog dlg = new ShowSenderDialog(this, true, s);
        dlg.setVisible(true);
        s.addSenderDataChangeListener(dlg);
    }//GEN-LAST:event_buShowSenderActionPerformed

    private void buAddSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buAddSenderActionPerformed
        if(senderTable.getSelectedRowCount() > 0) {
            Sender s = senderTable.getSelectedSenders().get(0);
            new EditSenderDialog(this, true, s, true).setVisible(true);
        } else {
            new EditSenderDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_buAddSenderActionPerformed

    private void buDeactivateSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeactivateSenderActionPerformed
        for(Sender s : senderTable.getSelectedSenders()) {
            s.deactivate();
        }
    }//GEN-LAST:event_buDeactivateSenderActionPerformed

    private void buAddReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buAddReceiverActionPerformed
        List<ReceiverGroup> selectedGroups = receiverTable.getSelectedReceiverGroups();
        if(selectedGroups.size() > 0) {
            ReceiverGroup rg = selectedGroups.get(0);
            new EditReceiverDialog(this, true, rg, true).setVisible(true);
        } else {
            new EditReceiverDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_buAddReceiverActionPerformed

    private void senderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_senderTableMouseClicked
        if(evt.getClickCount() == 2) {
            if(senderTable.getSelectedSenders().size() == 1) {
                Sender sender = senderTable.getSelectedSenders().get(0);
                new EditSenderDialog(this, true, sender, false).setVisible(true);
            }
        }
    }//GEN-LAST:event_senderTableMouseClicked

    /**
     * assumption: there is only one sender selected!
     * @param evt
     */
    private void buEditSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buEditSenderActionPerformed
        Sender s = senderTable.getSelectedSenders().get(0);
        new EditSenderDialog(this, true, s, false).setVisible(true);
    }//GEN-LAST:event_buEditSenderActionPerformed

    private void buDeleteSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeleteSenderActionPerformed
        Set<MulticastStream> senders = new HashSet<MulticastStream>(senderTable.getSelectedSenders());
        this.view.removeStreams(senders);
    }//GEN-LAST:event_buDeleteSenderActionPerformed

    /**
     * assumption: there is at least one receivergroup selected!
     * @param evt
     */
    private void buActivateReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buActivateReceiverActionPerformed
        for(ReceiverGroup r : receiverTable.getSelectedReceiverGroups()) {
            r.activate();
        }
    }//GEN-LAST:event_buActivateReceiverActionPerformed

    /**
     * assumption: there is at least one receivergroup selected!
     * @param evt
     */
    private void buDeactivateReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buDeactivateReceiverActionPerformed
        for(ReceiverGroup r : receiverTable.getSelectedReceiverGroups()) {
            r.deactivate();
        }
    }//GEN-LAST:event_buDeactivateReceiverActionPerformed

    /**
     * assumption: there is only one receiver selected
     * @param evt
     */
    private void buShowReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buShowReceiverActionPerformed
        ReceiverGroup rg = receiverTable.getSelectedReceiverGroups().get(0);
        Receiver r = receiverTable.getSelectedReceivers().get(0);
        ShowReceiverDialog dlg = new ShowReceiverDialog(this, true, r, rg);
        dlg.setVisible(true);
    }//GEN-LAST:event_buShowReceiverActionPerformed

    /**
     * assumption: there are only rows selected to be associated with exactly
     * one receivergroup
     * @param evt
     */
    private void buEditReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buEditReceiverActionPerformed
        ReceiverGroup rg = receiverTable.getSelectedReceiverGroups().get(0);
        new EditReceiverDialog(this, true, rg, false).setVisible(true);
    }//GEN-LAST:event_buEditReceiverActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame = new MainFrame();
                frame.setVisible(true);
                frame.test();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buActivateReceiver;
    private javax.swing.JButton buActivateSender;
    private javax.swing.JButton buAddReceiver;
    private javax.swing.JButton buAddSender;
    private javax.swing.JButton buDeactivateReceiver;
    private javax.swing.JButton buDeactivateSender;
    private javax.swing.JButton buDeleteReceiver;
    private javax.swing.JButton buDeleteSender;
    private javax.swing.JButton buEditReceiver;
    private javax.swing.JButton buEditSender;
    private javax.swing.JButton buShowReceiver;
    private javax.swing.JButton buShowSender;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JLabel laFaultyPackets;
    private javax.swing.JLabel laFaultyPacketsCaption;
    private javax.swing.JLabel laLostPackets;
    private javax.swing.JLabel laLostPacketsCaption;
    private javax.swing.JLabel laReceived;
    private javax.swing.JLabel laReceivedCaption;
    private javax.swing.JLabel laReceiverTableCaption;
    private javax.swing.JLabel laReceiverTableIcon;
    private javax.swing.JLabel laReceivingRate;
    private javax.swing.JLabel laReceivingRateCaption;
    private javax.swing.JLabel laReceivingStatisticsCaption;
    private javax.swing.JLabel laSenderRate;
    private javax.swing.JLabel laSenderRateCaption;
    private javax.swing.JLabel laSenderTableCaption;
    private javax.swing.JLabel laSendingStatistics;
    private javax.swing.JLabel laSent;
    private javax.swing.JLabel laSentCaption;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuReceiver;
    private javax.swing.JMenu menuSender;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miHelp;
    private javax.swing.JMenuItem miOpenProfile;
    private javax.swing.JMenuItem miPreferences;
    private javax.swing.JMenuItem miReceiverActivate;
    private javax.swing.JMenuItem miReceiverActivateAll;
    private javax.swing.JMenuItem miReceiverAdd;
    private javax.swing.JMenuItem miReceiverDeactivate;
    private javax.swing.JMenuItem miReceiverDeactivateAll;
    private javax.swing.JMenuItem miReceiverDelete;
    private javax.swing.JMenuItem miReceiverDeleteAll;
    private javax.swing.JMenuItem miReceiverEdit;
    private javax.swing.JMenuItem miReceiverSelectAll;
    private javax.swing.JMenuItem miSaveProfile;
    private javax.swing.JMenuItem miSaveProfileAs;
    private javax.swing.JMenuItem miSenderActivate;
    private javax.swing.JMenuItem miSenderActivateAll;
    private javax.swing.JMenuItem miSenderAdd;
    private javax.swing.JMenuItem miSenderDeactivate;
    private javax.swing.JMenuItem miSenderDeactivateAll;
    private javax.swing.JMenuItem miSenderDelete;
    private javax.swing.JMenuItem miSenderDeleteAll;
    private javax.swing.JMenuItem miSenderDetails;
    private javax.swing.JMenuItem miSenderEdit;
    private javax.swing.JMenuItem miSenderSelectAll;
    private javax.swing.JCheckBoxMenuItem miShowReceivers;
    private javax.swing.JCheckBoxMenuItem miShowReceivingStatistics;
    private javax.swing.JCheckBoxMenuItem miShowSenders;
    private javax.swing.JCheckBoxMenuItem miShowSendingStatistics;
    private javax.swing.JMenuItem mirReceiverDetails;
    private javax.swing.JPanel paReceiverButtons;
    private javax.swing.JPanel paReceiverTableCaption;
    private javax.swing.JPanel paReceiverTableInner;
    private javax.swing.JPanel paReceiverTableOuter;
    private javax.swing.JPanel paReceivingStatistics;
    private javax.swing.JPanel paSenderButtons;
    private javax.swing.JPanel paSenderTableCaption;
    private javax.swing.JPanel paSenderTableInner;
    private javax.swing.JPanel paSenderTableOuter;
    private javax.swing.JPanel paSendingStatistics;
    private javax.swing.JSplitPane receiverSplitPane;
    private com.spam.mctool.view.main.receivertable.JReceiverTable receiverTable;
    private javax.swing.JSeparator receivingStatisticsSeparator;
    private javax.swing.JSplitPane senderSplitPane;
    private com.spam.mctool.view.main.sendertable.JSenderTable senderTable;
    private javax.swing.JLabel senderTableIcon;
    private javax.swing.JSeparator sendingStatisticsSeparator;
    private com.spam.mctool.view.main.sendertable.SenderStateRenderer statusRenderer1;
    private com.spam.mctool.view.main.TwoColorRenderer twoColorRenderer1;
    // End of variables declaration//GEN-END:variables

    public MainFrameState getSessionState() {
        MainFrameState state = new MainFrameState();
        state.setXPosition(this.getX());
        state.setYPosition(this.getY());
        state.setHeight(this.getHeight());
        state.setWidth(this.getWidth());
        state.setWindowState(this.getExtendedState());
        return state;
    }

    public void setSessionState(MainFrameState state) {
        this.setLocation(state.getXPosition(), state.getYPosition());
        this.setSize(state.getWidth(), state.getHeight());
        this.setExtendedState(state.getWindowState());
    }

    private void test() {
        ReceiverTableModel tableModel = (ReceiverTableModel)receiverTable.getModel();
    }

    public void addSender(Map<String, String> senderMap, boolean activate) {
        this.view.addSender(senderMap, activate);
    }

    public void senderAdded(SenderAddedOrRemovedEvent e) {
        senderTable.senderAdded(e);
    }

    public void senderRemoved(SenderAddedOrRemovedEvent e) {
        senderTable.senderRemoved(e);
    }

    public void dataChanged(SenderDataChangedEvent e) {
        senderTable.dataChanged(e);
    }

    public void receiverGroupAdded(ReceiverAddedOrRemovedEvent e) {
        receiverTable.receiverGroupAdded(e);
    }

    public void receiverGroupRemoved(ReceiverAddedOrRemovedEvent e) {
        receiverTable.receiverGroupRemoved(e);
    }

    public void dataChanged(ReceiverDataChangedEvent e) {
        receiverTable.dataChanged(e);
    }

    public void addReceiverGroup(Map<String, String> receiverMap, boolean activate) {
        this.view.addReceiver(receiverMap, activate);
    }

    public void valueChanged(ListSelectionEvent e) {
        // refresh the sender buttons' state
        // TODO do properly
        if(senderTable.getSelectedRowCount() > 0) {
            buActivateSender.setEnabled(true);
            buDeactivateSender.setEnabled(true);
            buShowSender.setEnabled(true);
            buEditSender.setEnabled(true);
            buDeleteSender.setEnabled(true);
        }

        // refresh the receiver buttons' state
        if(receiverTable.getSelectedRowCount() > 0) {
            buActivateReceiver.setEnabled(true);
            buDeactivateReceiver.setEnabled(true);
            buShowReceiver.setEnabled(true);
            buEditReceiver.setEnabled(true);
            buDeleteReceiver.setEnabled(true);
        }
    }

    

    

}
